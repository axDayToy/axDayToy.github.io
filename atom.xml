<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿羡の空间站</title>
  
  
  <link href="https://www.axcode.cn/atom.xml" rel="self"/>
  
  <link href="https://www.axcode.cn/"/>
  <updated>2025-06-09T09:47:42.995Z</updated>
  <id>https://www.axcode.cn/</id>
  
  <author>
    <name>阿羡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>🦋Vue实现请求并下载导入模板功能</title>
    <link href="https://www.axcode.cn/posts/3035262d.html"/>
    <id>https://www.axcode.cn/posts/3035262d.html</id>
    <published>2025-06-09T06:04:31.000Z</published>
    <updated>2025-06-09T09:47:42.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip "><p>在 Vue中实现请求并下载导入模板的功能，通常需要后端提供一个模板文件的下载接口。 下列以<code>Vue3</code>为例。</p></div><h2 id="1-基本实现方法"><a href="#1-基本实现方法" class="headerlink" title="1.基本实现方法"></a>1.基本实现方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> <span class="comment">// 或使用你项目中的请求库</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一：直接使用 fetch 或 axios 下载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">downloadTemplate</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 替换为你的实际API地址</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/template/download&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>, <span class="comment">// 重要：指定响应类型为 blob</span></span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">templateType</span>: <span class="string">&#x27;your-template-type&#x27;</span> <span class="comment">// 如果有不同类型的模板</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建下载链接</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(<span class="keyword">new</span> <span class="title class_">Blob</span>([response.<span class="property">data</span>]))</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    link.<span class="property">href</span> = url</span><br><span class="line">    link.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;导入模板.xlsx&#x27;</span>) <span class="comment">// 设置文件名</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(link)</span><br><span class="line">    link.<span class="title function_">click</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(link)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;模板下载成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载失败: &#x27;</span> + (error.<span class="property">message</span> || <span class="string">&#x27;请联系管理员&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-封装成可复用组件"><a href="#2-封装成可复用组件" class="headerlink" title="2.封装成可复用组件"></a>2.封装成可复用组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button </span><br><span class="line">    type=&quot;primary&quot; </span><br><span class="line">    :loading=&quot;downloading&quot;</span><br><span class="line">    @click=&quot;handleDownload&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    下载导入模板</span><br><span class="line">  &lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line"></span><br><span class="line">const downloading = ref(false)</span><br><span class="line"></span><br><span class="line">const handleDownload = async () =&gt; &#123;</span><br><span class="line">  downloading.value = true</span><br><span class="line">  try &#123;</span><br><span class="line">    const response = await axios.get(&#x27;/api/template/download&#x27;, &#123;</span><br><span class="line">      responseType: &#x27;blob&#x27;,</span><br><span class="line">      params: &#123; type: &#x27;import&#x27; &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    // 从响应头获取文件名</span><br><span class="line">    const contentDisposition = response.headers[&#x27;content-disposition&#x27;]</span><br><span class="line">    let fileName = &#x27;导入模板.xlsx&#x27;</span><br><span class="line">    if (contentDisposition) &#123;</span><br><span class="line">      const fileNameMatch = contentDisposition.match(/filename=(.+)/)</span><br><span class="line">      if (fileNameMatch &amp;&amp; fileNameMatch[1]) &#123;</span><br><span class="line">        fileName = decodeURIComponent(fileNameMatch[1])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    const url = window.URL.createObjectURL(new Blob([response.data]))</span><br><span class="line">    const link = document.createElement(&#x27;a&#x27;)</span><br><span class="line">    link.href = url</span><br><span class="line">    link.setAttribute(&#x27;download&#x27;, fileName)</span><br><span class="line">    document.body.appendChild(link)</span><br><span class="line">    link.click()</span><br><span class="line">    document.body.removeChild(link)</span><br><span class="line">    window.URL.revokeObjectURL(url)</span><br><span class="line">    </span><br><span class="line">    ElMessage.success(&#x27;模板下载成功&#x27;)</span><br><span class="line">  &#125; catch (error) &#123;</span><br><span class="line">    ElMessage.error(`下载失败: $&#123;error.message || &#x27;请联系管理员&#x27;&#125;`)</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    downloading.value = false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-使用文件流下载（适用于大文件）"><a href="#3-使用文件流下载（适用于大文件）" class="headerlink" title="3. 使用文件流下载（适用于大文件）"></a>3. 使用文件流下载（适用于大文件）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">downloadLargeTemplate</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/template/download-large&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> reader = response.<span class="property">body</span>.<span class="title function_">getReader</span>()</span><br><span class="line">    <span class="keyword">const</span> contentLength = +response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;Content-Length&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> receivedLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> chunks = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader.<span class="title function_">read</span>()</span><br><span class="line">      <span class="keyword">if</span> (done) <span class="keyword">break</span></span><br><span class="line">      </span><br><span class="line">      chunks.<span class="title function_">push</span>(value)</span><br><span class="line">      receivedLength += value.<span class="property">length</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`下载进度: <span class="subst">$&#123;<span class="built_in">Math</span>.round(receivedLength / contentLength * <span class="number">100</span>)&#125;</span>%`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>(chunks)</span><br><span class="line">    <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">    <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a.<span class="property">href</span> = url</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;大型导入模板.xlsx&#x27;</span></span><br><span class="line">    a.<span class="title function_">click</span>()</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(url)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载失败: &#x27;</span> + error.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-后端配合示例（Node-js-Express）"><a href="#4-后端配合示例（Node-js-Express）" class="headerlink" title="4.后端配合示例（Node.js Express）"></a>4.后端配合示例（Node.js Express）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端路由示例</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/api/template/download&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../templates/import-template.xlsx&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">&#x27;导入模板.xlsx&#x27;</span></span><br><span class="line">  </span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">`attachment; filename=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(fileName)&#125;</span>`</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> fileStream = fs.<span class="title function_">createReadStream</span>(filePath)</span><br><span class="line">  fileStream.<span class="title function_">pipe</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-使用第三方库（如-file-saver）"><a href="#5-使用第三方库（如-file-saver）" class="headerlink" title="5.使用第三方库（如 file-saver）"></a>5.使用第三方库（如 file-saver）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-saver</span><br></pre></td></tr></table></figure><p>然后使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">downloadWithFileSaver</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/template/download&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">saveAs</span>(response.<span class="property">data</span>, <span class="string">&#x27;导入模板.xlsx&#x27;</span>)</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">success</span>(<span class="string">&#x27;模板下载成功&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载失败: &#x27;</span> + error.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>确保后端设置了正确的 <code>Content-Type</code> 和 <code>Content-Disposition</code> 响应头</li><li>对于大文件，考虑使用流式下载并显示进度条</li><li>下载完成后要及时释放创建的 URL 对象，避免内存泄漏</li><li>根据实际业务需求调整文件名和错误处理逻辑</li></ol>]]></content>
    
    
    <summary type="html">Vue实现请求并下载导入模板功能</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>🍊没有设置2FA认证如何登录github</title>
    <link href="https://www.axcode.cn/posts/d874c695.html"/>
    <id>https://www.axcode.cn/posts/d874c695.html</id>
    <published>2025-06-09T03:19:44.000Z</published>
    <updated>2025-06-09T09:47:02.983Z</updated>
    
    <content type="html"><![CDATA[<div class="tip "><p>此文来自于CSDN <a href="https://blog.csdn.net/qq_43450589">[君子未期]</a>本站只做记录使用，如有侵权，请联系站长删除！</p></div><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>进入github官网，输入账号密码后，出现如下页面。经查询可知国内电话号无法通过认证，但我预先并未在github中设置2FA认证。</li><li>2FA定义：双因子认证2FA（Two Factor Authentication）是一种安全认证过程，需要用户提供两种不同类型的认证因子来表明自己的身份，包括密码、指纹、短信验证码、智能卡、生物识别等多种因素组合，从而提高用户账户的安全性和可靠性。</li></ul><p><img src="https://bu.dusays.com/2025/06/09/68465a17364e0.jpg" alt=""></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>点击下面的 <code>use a recovery code</code></p><p><img src="https://bu.dusays.com/2025/06/09/68465a173a828.jpg" alt=""></p></li><li><p>出现如下界面</p><p><img src="https://bu.dusays.com/2025/06/09/68465a173b6bf.jpg" alt=""></p></li><li><p>点击下面红色框的链接</p><p><img src="https://bu.dusays.com/2025/06/09/68465a16ed941.jpg" alt=""></p></li><li><p>跳转到下面的页面，在本地电脑中搜索文件</p><p><img src="https://bu.dusays.com/2025/06/09/68465a1726eb5.jpg" alt=""></p></li><li><p>搜索出的文本文件中包含多个recovery-codes，随便复制一个粘贴到之前的输入框中，便可以成功登录github。</p><p><img src="https://bu.dusays.com/2025/06/09/68465be5393e3.png" alt=""></p></li><li><p>登录github后及时设置2FA认证</p><p>步骤如下：点击头像→setting→password and authentication→preferred 2FA method→选择Authenticator app。</p><p><img src="https://bu.dusays.com/2025/06/09/68465e20d702f.png" alt=""></p></li><li><p>在手机以你该用商店下载 Authenticator ，打开应用后→主页→右上角’+号’→添加账户→其他账户→出现扫码框</p></li><li><p>回到pc端→下滑页面→选择Authenticator app→edit→用手机扫码→将手机上出现的code输入到<a href="https://so.csdn.net/so/search?q=输入框&amp;spm=1001.2101.3001.7020">输入框</a>中→save</p><p><img src="https://bu.dusays.com/2025/06/09/68466258db27c.png" alt=""></p></li></ol><p>输入手机上的令牌后，以后登录<a href="https://so.csdn.net/so/search?q=github&amp;spm=1001.2101.3001.7020">github</a>就可以查看手机的一次性密码代码输入到pc端，完成验证。</p>]]></content>
    
    
    <summary type="html">没有设置2FA认证如何登录github</summary>
    
    
    
    <category term="Git" scheme="https://www.axcode.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.axcode.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>vue使用elementPlus实现基础级联选择</title>
    <link href="https://www.axcode.cn/posts/efbf8bf9.html"/>
    <id>https://www.axcode.cn/posts/efbf8bf9.html</id>
    <published>2025-06-07T13:57:40.000Z</published>
    <updated>2025-06-09T06:11:04.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一：动态绑定选项（推荐）"><a href="#方案一：动态绑定选项（推荐）" class="headerlink" title="方案一：动态绑定选项（推荐）"></a>方案一：动态绑定选项（推荐）</h3><p>完整代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">    &lt;!-- 疏散点类型选择 --&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;疏散点类型&quot;&gt;</span><br><span class="line">      &lt;el-select </span><br><span class="line">        v-model=&quot;form.disperePointType&quot; </span><br><span class="line">        placeholder=&quot;请选择疏散点类型&quot;</span><br><span class="line">        @change=&quot;handleDisperePointTypeChange&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-option </span><br><span class="line">          v-for=&quot;(item, index) in disperePointTypeOptions&quot;</span><br><span class="line">          :key=&quot;index&quot; </span><br><span class="line">          :label=&quot;item.label&quot; </span><br><span class="line">          :value=&quot;item.value&quot; </span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 建筑类型选择（动态显示） --&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;建筑类型&quot; v-if=&quot;showPlaceSelect&quot;&gt;</span><br><span class="line">      &lt;el-select v-model=&quot;form.buildingType&quot; placeholder=&quot;请选择建筑类型&quot;&gt;</span><br><span class="line">        &lt;el-option </span><br><span class="line">          v-for=&quot;(item, index) in buildingTypeOptions&quot;</span><br><span class="line">          :key=&quot;index&quot; </span><br><span class="line">          :label=&quot;item.label&quot; </span><br><span class="line">          :value=&quot;item.value&quot; </span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 表单数据</span><br><span class="line">const form = ref(&#123;</span><br><span class="line">  disperePointType: &#x27;&#x27;,</span><br><span class="line">  buildingType: &#x27;&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 显示控制</span><br><span class="line">const showPlaceSelect = ref(false)</span><br><span class="line"></span><br><span class="line">// 疏散点类型选项</span><br><span class="line">const disperePointTypeOptions = ref([</span><br><span class="line">  &#123; value: &#x27;government&#x27;, label: &#x27;党政机关疏散点&#x27; &#125;,</span><br><span class="line">  &#123; value: &#x27;resident&#x27;, label: &#x27;城镇居民常设疏散安置点&#x27; &#125;,</span><br><span class="line">  &#123; value: &#x27;temporary&#x27;, label: &#x27;城镇居民临时疏散点&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 建筑类型选项数据（按疏散点类型分类）</span><br><span class="line">const buildingTypeData = &#123;</span><br><span class="line">  government: [</span><br><span class="line">    &#123; value: &#x27;gov_hotel&#x27;, label: &#x27;酒店（党政机关）&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;state_guesthouse&#x27;, label: &#x27;国宾馆&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;training_base&#x27;, label: &#x27;培训基地&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  resident: [</span><br><span class="line">    &#123; value: &#x27;stadium&#x27;, label: &#x27;体育场&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;school&#x27;, label: &#x27;学校&#x27; &#125;,</span><br><span class="line">    &#123; value: &#x27;resident_hotel&#x27;, label: &#x27;酒店（居民）&#x27; &#125;</span><br><span class="line">  ],</span><br><span class="line">  temporary: [</span><br><span class="line">    &#123; value: &#x27;open_space&#x27;, label: &#x27;空地&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 动态计算的建筑类型选项</span><br><span class="line">const buildingTypeOptions = ref([])</span><br><span class="line"></span><br><span class="line">// 初始化默认选中第一项</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  if (disperePointTypeOptions.value.length &gt; 0) &#123;</span><br><span class="line">    form.value.disperePointType = disperePointTypeOptions.value[0].value</span><br><span class="line">    handleDisperePointTypeChange(form.value.disperePointType)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 疏散点类型变化处理</span><br><span class="line">const handleDisperePointTypeChange = (type) =&gt; &#123;</span><br><span class="line">  if (type &amp;&amp; buildingTypeData[type]) &#123;</span><br><span class="line">    buildingTypeOptions.value = buildingTypeData[type]</span><br><span class="line">    // 默认选中建筑类型第一项</span><br><span class="line">    if (buildingTypeOptions.value.length &gt; 0) &#123;</span><br><span class="line">      form.value.buildingType = buildingTypeOptions.value[0].value</span><br><span class="line">    &#125;</span><br><span class="line">    showPlaceSelect.value = true</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    showPlaceSelect.value = false</span><br><span class="line">    form.value.buildingType = &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="关键实现说明"><a href="#关键实现说明" class="headerlink" title="关键实现说明"></a>关键实现说明</h3><ol><li><h4 id="默认选中第一项："><a href="#默认选中第一项：" class="headerlink" title="默认选中第一项："></a><strong>默认选中第一项</strong>：</h4><ul><li>在 <code>onMounted</code> 生命周期钩子中设置默认值</li><li>疏散点类型默认选中第一个选项</li><li>自动触发 <code>handleDisperePointTypeChange</code> 设置对应的建筑类型第一项</li></ul></li><li><p><strong>动态选项更新</strong>：</p><ul><li>使用 <code>buildingTypeData</code> 对象存储不同疏散点类型对应的建筑类型</li><li>当疏散点类型变化时，更新 <code>buildingTypeOptions</code> 数组使用 <code>v-if</code> 控制第二级选择框的显示</li></ul></li><li><p><strong>显示控制</strong>：</p><ul><li>使用 <code>v-if=&quot;showPlaceSelect&quot;</code> 控制建筑类型选择框的显示</li><li>只有选择了有效的疏散点类型时才显示建筑类型选择</li></ul></li><li><p><strong>数据重置</strong>：</p><ul><li>当疏散点类型变化时，自动重置建筑类型选择</li><li>确保选项和值的同步更新</li></ul></li></ol><h3 id="方案二：条件渲染（适合选项结构差异大的场景）"><a href="#方案二：条件渲染（适合选项结构差异大的场景）" class="headerlink" title="方案二：条件渲染（适合选项结构差异大的场景）"></a>方案二：条件渲染（适合选项结构差异大的场景）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form&gt;</span><br><span class="line">    &lt;!-- 第一级：疏散点类型 --&gt;</span><br><span class="line">    &lt;el-select v-model=&quot;evacuationType&quot; placeholder=&quot;请选择类型&quot;&gt;</span><br><span class="line">      &lt;el-option value=&quot;government&quot; label=&quot;党政机关疏散点&quot; /&gt;</span><br><span class="line">      &lt;el-option value=&quot;resident&quot; label=&quot;城镇居民常设疏散安置点&quot; /&gt;</span><br><span class="line">      &lt;el-option value=&quot;temporary&quot; label=&quot;城镇居民临时疏散点&quot; /&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 党政机关选项 --&gt;</span><br><span class="line">    &lt;el-select </span><br><span class="line">      v-if=&quot;evacuationType === &#x27;government&#x27;&quot;</span><br><span class="line">      v-model=&quot;govPlace&quot; </span><br><span class="line">      placeholder=&quot;请选择党政机关场所&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-option value=&quot;hotel_gov&quot; label=&quot;酒店（党政机关）&quot; /&gt;</span><br><span class="line">      &lt;el-option value=&quot;state_guesthouse&quot; label=&quot;国宾馆&quot; /&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 居民常设选项 --&gt;</span><br><span class="line">    &lt;el-select </span><br><span class="line">      v-if=&quot;evacuationType === &#x27;resident&#x27;&quot;</span><br><span class="line">      v-model=&quot;residentPlace&quot; </span><br><span class="line">      placeholder=&quot;请选择居民安置点&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-option value=&quot;school&quot; label=&quot;学校&quot; /&gt;</span><br><span class="line">      &lt;el-option value=&quot;stadium&quot; label=&quot;体育场&quot; /&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="关键实现要点"><a href="#关键实现要点" class="headerlink" title="关键实现要点"></a>关键实现要点</h3><ol><li><h4 id="数据结构设计"><a href="#数据结构设计" class="headerlink" title="数据结构设计"></a><strong>数据结构设计</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象存储层级关系</span></span><br><span class="line"><span class="keyword">const</span> allPlaces = &#123;</span><br><span class="line">  类型<span class="number">1</span>: [选项<span class="number">1</span>, 选项<span class="number">2</span>],</span><br><span class="line">  类型<span class="number">2</span>: [选项<span class="number">3</span>, 选项<span class="number">4</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>动态计算属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filteredPlaces = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> currentType.<span class="property">value</span> ? allPlaces[currentType.<span class="property">value</span>] : []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>重置二级选择</strong>（当一级变化时）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(evacuationType, <span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</span><br><span class="line">  specificPlace.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 清空之前的选择</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="效果增强建议"><a href="#效果增强建议" class="headerlink" title="效果增强建议"></a>效果增强建议</h3><ol><li><h4 id="添加禁用状态"><a href="#添加禁用状态" class="headerlink" title="添加禁用状态"></a><strong>添加禁用状态</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select </span><br><span class="line">  :disabled=&quot;!evacuationType&quot;</span><br><span class="line">  placeholder=&quot;请先选择类型&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加分组显示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-option-group</span><br><span class="line">  v-for=&quot;group in filteredGroups&quot;</span><br><span class="line">  :key=&quot;group.label&quot;</span><br><span class="line">  :label=&quot;group.label&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-option</span><br><span class="line">    v-for=&quot;item in group.options&quot;</span><br><span class="line">    :key=&quot;item.value&quot;</span><br><span class="line">    :label=&quot;item.label&quot;</span><br><span class="line">    :value=&quot;item.value&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/el-option-group&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="完整数据参考"><a href="#完整数据参考" class="headerlink" title="完整数据参考"></a>完整数据参考</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allPlaces = &#123;</span><br><span class="line">  <span class="attr">government</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;hotel_gov&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;酒店（党政机关）&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;state_guesthouse&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;国宾馆&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;conference_center&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;党政会议中心&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resident</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;village&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;村庄&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;stadium&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;体育场&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;school&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;学校&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">temporary</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;open_field&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;空地&#x27;</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">vue使用elementPlus实现基础级联选择</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习</title>
    <link href="https://www.axcode.cn/posts/624e0a2.html"/>
    <id>https://www.axcode.cn/posts/624e0a2.html</id>
    <published>2025-05-26T09:20:31.000Z</published>
    <updated>2025-06-02T09:34:22.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="块注释"><a href="#块注释" class="headerlink" title="块注释"></a>块注释</h3><p><img src="https://bu.dusays.com/2025/05/26/68341d555cd07.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2025</span>)</span><br></pre></td></tr></table></figure><h3 id="行内注释"><a href="#行内注释" class="headerlink" title="行内注释"></a>行内注释</h3><p><img src="https://bu.dusays.com/2025/05/26/68341d5470bf6.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我在学习python&#x27;</span>)  <span class="comment"># 行内注释</span></span><br></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>以三对双引号 <span class='p red'>or</span> 三对单引号开始和结尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是多行注释</span></span><br><span class="line"><span class="string">1111</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我是多行注释 &#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="注释的作用"><a href="#注释的作用" class="headerlink" title="注释的作用"></a>注释的作用</h3><p><img src="https://bu.dusays.com/2025/05/26/68341d55731b3.png" alt=""></p><h2 id="print-函数：输出-打印指定内容"><a href="#print-函数：输出-打印指定内容" class="headerlink" title="print()函数：输出/打印指定内容"></a>print()函数：输出/打印指定内容</h2><p><img src="https://bu.dusays.com/2025/05/26/68341d5575a7d.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">year = <span class="number">2025</span></span><br><span class="line">month = <span class="number">5</span></span><br><span class="line">day = <span class="number">26</span></span><br><span class="line">week = <span class="string">&#x27;一&#x27;</span></span><br><span class="line">weather = <span class="string">&#x27;晴&#x27;</span></span><br><span class="line">temp = <span class="number">34.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;今天是 %d 年 %02d 月 %d 日, 星期 %s, 天气 %s, 气温 %.1f 摄氏度&#x27;</span> % (year, month, day, week, weather, temp))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/05/26/6834215a31bd3.png" alt=""></p><h2 id="input"><a href="#input" class="headerlink" title="input()"></a>input()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># input()的使用</span></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&#x27;请输入昵称：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入年龄：&#x27;</span>))</span><br><span class="line"><span class="comment"># age = int(age)</span></span><br><span class="line">year = <span class="number">2025</span></span><br><span class="line">brith = year - age</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你的出生年份是&#x27;</span>, brith)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2025/06/02/683d6fb77d771.png" alt=""></p><h2 id="章节总结"><a href="#章节总结" class="headerlink" title="章节总结"></a>章节总结</h2><p><img src="https://bu.dusays.com/2025/06/02/683d6fb80b347.png" alt=""></p><h2 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a>命令总结</h2><p><img src="https://bu.dusays.com/2025/06/02/683d6fb811029.png" alt=""></p><h2 id="单词总结"><a href="#单词总结" class="headerlink" title="单词总结"></a>单词总结</h2><p><img src="https://bu.dusays.com/2025/06/02/683d6fb7f3eb5.png" alt=""></p>]]></content>
    
    
    <summary type="html">🍋‍🟩Python基础学习</summary>
    
    
    
    <category term="Python" scheme="https://www.axcode.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://www.axcode.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>vue3在使用elementPlus表格处理不规则数据</title>
    <link href="https://www.axcode.cn/posts/55cb2194.html"/>
    <id>https://www.axcode.cn/posts/55cb2194.html</id>
    <published>2024-08-31T09:48:53.000Z</published>
    <updated>2024-08-31T10:39:19.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此文主要记录<code>el-table</code>循环表头以及数据时，对于后台返回不规则数据如何处理的问题。</p><p>形如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;姓名&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小明&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;姓名&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小红&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;姓名&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小黄&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;年龄&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span> <span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;年龄&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;fieldName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;年龄&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;fieldNameValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>遇到这种不规则的数据 可以试着使用下列的方式处理。</p><h2 id="模板中的代码"><a href="#模板中的代码" class="headerlink" title="模板中的代码"></a>模板中的代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=&quot;tableData&quot; border&gt;</span><br><span class="line">  &lt;el-table-column</span><br><span class="line">    v-for=&quot;col in columns&quot;</span><br><span class="line">    :key=&quot;col.prop&quot;</span><br><span class="line">    :label=&quot;col.label&quot;&gt;</span><br><span class="line">    &lt;template #default=&quot;&#123; row, column, $index &#125;&quot;&gt;</span><br><span class="line">      &lt;el-input</span><br><span class="line">        v-if=&quot;isEditable&quot;</span><br><span class="line">        v-model=&quot;row[col.prop]&quot;</span><br><span class="line">        size=&quot;small&quot;</span><br><span class="line">      &gt;&lt;/el-input&gt;</span><br><span class="line">      &lt;span v-else&gt;&#123;&#123; row[col.prop] &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><h2 id="Script模板中对应的数据处理"><a href="#Script模板中对应的数据处理" class="headerlink" title="Script模板中对应的数据处理"></a>Script模板中对应的数据处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> columns = <span class="title function_">ref</span>([]);</span><br><span class="line"><span class="keyword">const</span> tableData = <span class="title function_">ref</span>([]);</span><br><span class="line"><span class="keyword">const</span> isEditable = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processData</span> = (<span class="params">response</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 生成列信息 response 为后台请求成功后返回的数据</span></span><br><span class="line">  <span class="keyword">const</span> fields = response.<span class="property">data</span>.<span class="title function_">map</span>(<span class="function"><span class="params">column</span> =&gt;</span> column[<span class="number">0</span>].<span class="property">fieldName</span>);</span><br><span class="line">  <span class="keyword">const</span> columnsData = fields.<span class="title function_">map</span>(<span class="function"><span class="params">field</span> =&gt;</span> (&#123; <span class="attr">prop</span>: field, <span class="attr">label</span>: field &#125;));</span><br><span class="line">  columns.<span class="property">value</span> = columnsData;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成表格数据</span></span><br><span class="line">  <span class="keyword">const</span> numRows = response.<span class="property">data</span>[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: numRows &#125;, <span class="function">(<span class="params">_, rowIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> row = &#123;&#125;;</span><br><span class="line">    response.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">column</span> =&gt;</span> &#123;</span><br><span class="line">      row[column[<span class="number">0</span>].<span class="property">fieldName</span>] = column.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">index</span> === rowIndex)?.<span class="property">fieldNameValue</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">  &#125;);</span><br><span class="line">  tableData.<span class="property">value</span> = data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">☁️vue3在使用elementPlus表格处理不规则数据</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3基于Axios封装request请求</title>
    <link href="https://www.axcode.cn/posts/3f98be46.html"/>
    <id>https://www.axcode.cn/posts/3f98be46.html</id>
    <published>2024-08-08T09:48:46.000Z</published>
    <updated>2024-08-08T10:31:24.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>使用<code>pnpm</code> or <code>cnpm</code> or <code>cnpm</code>安装<code>axios</code>插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h2 id="创建封装请求的Ts或Js文件"><a href="#创建封装请求的Ts或Js文件" class="headerlink" title="创建封装请求的Ts或Js文件"></a>创建封装请求的Ts或Js文件</h2><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>在<code>src</code>文件夹下的utils文件夹下创建一个<code>request.ts</code>文件</p>            </div><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行axios 二次封装 使用请求与响应器来截</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useUserStroe <span class="keyword">from</span> <span class="string">&#x27;@/store/modules/user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、利用axios对象的create方法 创建axios 实例 （可以配置其他的配置）</span></span><br><span class="line"><span class="keyword">let</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础路径</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_BASE_API</span>, <span class="comment">//基础路径上会携带/api</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// 超时时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.第二步 request 实例添加请求与响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取用户相关的小仓库 获取仓库的token 登录成功后携带给服务器</span></span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStroe</span>();</span><br><span class="line">  <span class="keyword">if</span> (userStore.<span class="property">token</span>) &#123;</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">token</span> = userStore.<span class="property">token</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// config 配置对象, header属性请求头经常给服务器端携带公共参数</span></span><br><span class="line">  <span class="comment">// 返回配置对象</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 成功回调</span></span><br><span class="line">  <span class="comment">// 简化数据</span></span><br><span class="line">  <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 失败的回调 处理http网络错误</span></span><br><span class="line">  <span class="comment">// 定一个变量 存储网络信息</span></span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">// http状态码</span></span><br><span class="line">  <span class="keyword">let</span> status = error.<span class="property">response</span>.<span class="property">status</span>;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      message = <span class="string">&#x27;TOKEN过期&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      message = <span class="string">&#x27;无权访问&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求地址错误&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务器错误&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      message = <span class="string">&#x27;网络出现错误&#x27;</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    message</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对外暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure><h2 id="使用封装后的请求"><a href="#使用封装后的请求" class="headerlink" title="使用封装后的请求"></a>使用封装后的请求</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一管理用户相关的接口</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="variable constant_">API</span> &#123;</span><br><span class="line">  <span class="variable constant_">LOGIN_URL</span> = <span class="string">&#x27;/admin/acl/index/login&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">login</span> = (<span class="params"><span class="attr">data</span>: loginFomData</span>) =&gt; request.<span class="property">post</span>&lt;<span class="built_in">any</span>, loginResponseData&gt;(<span class="variable constant_">API</span>.<span class="property">LOGIN_URL</span>, data);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在需要使用接口的页面引入</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用接口</span></span><br><span class="line"><span class="keyword">import</span> &#123; login &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户登录的方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">userLogin</span>(<span class="params"><span class="attr">data</span>: loginFomData</span>) &#123;</span><br><span class="line">  <span class="comment">// 用户登录请求</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: loginResponseData = <span class="keyword">await</span> <span class="title function_">login</span>(data);</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🏆Vue3基于Axios封装request请求</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>React三大核心属性</title>
    <link href="https://www.axcode.cn/posts/385b8e20.html"/>
    <id>https://www.axcode.cn/posts/385b8e20.html</id>
    <published>2024-07-23T13:41:19.000Z</published>
    <updated>2024-07-24T05:37:59.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-state属性"><a href="#1-state属性" class="headerlink" title="1.state属性"></a>1.state属性</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</li><li>把组件看成是一个状态机（State Machines） 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li></ul><h3 id="基础实例"><a href="#基础实例" class="headerlink" title="基础实例"></a>基础实例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">isHot</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;isHot?&#x27;炎热&#x27;:&#x27;凉爽&#x27;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> isHot = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">isHot</span>;</span><br><span class="line">    <span class="comment">// 更新state 是一种合并 不是替换</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>));</span><br></pre></td></tr></table></figure><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p><code>changeWeather</code> 放在哪里？?</p>            </div><ul><li><p><code>Weather</code> 的原型对象上 供实例使用</p></li><li><p>由于<code>changeWeather</code> 是为<code>onClick</code>做为的回调 所以不是通过实例的回调是直接使用</p></li><li><p>类中的方法默认开启了局部的严格模式 所以<code>changeWeather</code> 中的<code>this</code>为<code>undefined</code></p><ul><li><p>强制绑定this: 通过函数对象的bind()</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用箭头函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">changeWeather = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>状态数据，不能直接修改或更新需要使用 <code>this.setState()</code>;</p></li></ul></li></ul><h3 id="state简写方式"><a href="#state简写方式" class="headerlink" title="state简写方式"></a>state简写方式</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DemoName</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">key</span>: value &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;key&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handle&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  handle = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;key&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">key</span>:!key&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Props属性"><a href="#Props属性" class="headerlink" title="Props属性"></a>Props属性</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>每个组件对象都会有<code>props</code>(properties的简写)属性</li><li>组件标签的所有属性都保存在props中</li><li>内部读取某个属性值 <code>this.props.propertyName</code></li><li>作用：通过标签属性从组件外 向组件内传递数据（只读 read only）</li><li>对props中的属性值进行类型限制和必要性限制</li></ul><h3 id="基础实例-1"><a href="#基础实例-1" class="headerlink" title="基础实例"></a>基础实例</h3><h4 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name,sex,age &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123; <span class="attr">name</span>:<span class="string">&#x27;Jarry&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name,age,sex&#125; = props;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123; <span class="attr">name</span>:<span class="string">&#x27;Jarry&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="对Props进行约束限制"><a href="#对Props进行约束限制" class="headerlink" title="对Props进行约束限制"></a>对Props进行约束限制</h3><h4 id="类组件的约束形式"><a href="#类组件的约束形式" class="headerlink" title="类组件的约束形式"></a>类组件的约束形式</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 对标签属性值进行类型 bi必要性的限制</span></span><br><span class="line">  <span class="keyword">static</span> propTypes =&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 指定默认的属性值</span></span><br><span class="line">  <span class="keyword">static</span> defaultProps =&#123;</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;保密&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name,sex,age &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123; <span class="attr">name</span>:<span class="string">&#x27;Jarry&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="对函数组件的约束形式"><a href="#对函数组件的约束形式" class="headerlink" title="对函数组件的约束形式"></a>对函数组件的约束形式</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">props</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name,age,sex&#125; = props;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对标签属性值进行类型 bi必要性的限制</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> =&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定默认的属性值</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">defaultProps</span> =&#123;</span><br><span class="line">  <span class="attr">sex</span>:<span class="string">&#x27;保密&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = &#123; <span class="attr">name</span>:<span class="string">&#x27;Jarry&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p</span>&#125; /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;test&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="props与state的区别"><a href="#props与state的区别" class="headerlink" title="props与state的区别"></a>props与state的区别</h3><div class='checkbox red'><input type="checkbox" />            <p>props中的数据都是外界传递过来的</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>state中的数据都是组件私有的；（通过Ajax获取回来的数据，一般都是私有数据）</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>props中的数据都是只读的，不能重新赋值</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>state中的数据，都是可读可写的</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>子组件只能通过props传递数据</p>            </div><h2 id="Refs属性"><a href="#Refs属性" class="headerlink" title="Refs属性"></a>Refs属性</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>组件内的标签可以定义ref属性类标识自己，有点类似与JS中的id</li><li>React文档中再三强调，请不要过度使用refs，所以当我们可以用dom原生对象解决时，尽量不要使用refs 依照之前的写法，首先是给出类组件和函数组件中refs的写法</li></ul><h3 id="三种编码形式"><a href="#三种编码形式" class="headerlink" title="三种编码形式"></a>三种编码形式</h3><h4 id="1-字符串形式的ref（官方不推荐）"><a href="#1-字符串形式的ref（官方不推荐）" class="headerlink" title="1.字符串形式的ref（官方不推荐）"></a>1.字符串形式的ref（官方不推荐）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  showblurData = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">refs</span>.<span class="property">input</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#x27;input&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;失去焦点展示数据&#x27;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.showblurData&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="2-函数回调形式的ref"><a href="#2-函数回调形式的ref" class="headerlink" title="2.函数回调形式的ref"></a>2.函数回调形式的ref</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">/** 展示失去焦点的数据 */</span></span><br><span class="line">  showblurData = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">input2</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">c</span>=&gt;</span> this.input2 = c&#125; type=&#x27;text&#x27; placeholder=&#x27;失去焦点展示数据&#x27; </span></span><br><span class="line"><span class="language-xml">        onBlur=&#123;this.showblurData&#125; /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="3-createRef创建ref容器（官方推荐）"><a href="#3-createRef创建ref容器（官方推荐）" class="headerlink" title="3.createRef创建ref容器（官方推荐）"></a>3.createRef创建ref容器（官方推荐）</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * React.createRef 调用函数后可以返回一个容器 该容器可以存储被ref所标识的节点</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  myRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  <span class="comment">/** 展示左侧数据 */</span></span><br><span class="line">  showData = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">myRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> <span class="attr">placeholder</span>=<span class="string">&quot;点击按钮提示数据&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showData&#125;</span>&gt;</span>点击我提示左边的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍅React三大核心属性</summary>
    
    
    
    <category term="React" scheme="https://www.axcode.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://www.axcode.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React中定义组件的方式</title>
    <link href="https://www.axcode.cn/posts/7c5a67e6.html"/>
    <id>https://www.axcode.cn/posts/7c5a67e6.html</id>
    <published>2024-07-19T05:35:11.000Z</published>
    <updated>2024-07-19T06:25:27.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-函数式组件（简单组件）"><a href="#1-函数式组件（简单组件）" class="headerlink" title="1.函数式组件（简单组件）"></a>1.函数式组件（简单组件）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>函数式组件是使用纯粹的JavaScript函数来定义的。它接收一个<code>props</code>对象作为参数，并返回一个用于描述组件UI的React元素。函数式组件是React中最简单和最常见的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建函数时式组件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params">props</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件&#123;props&#125;（适用于【简单组件】的定义）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2. 挂载组件到页面</span></span><br><span class="line">    <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>执行<code>ReactDOM.render(）</code>之后发生了什么?</p>            </div><ul><li><code>React</code> 解析组件标签 找到了<code>MyComponent</code>组件</li><li>发现组件是使用函数定义的 随后调用该函数 将返回的虚拟<code>DOM</code>转化为真实的<code>DOM</code>随后呈现在页面上。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>简洁：相对于类组件，函数式组件通常具有更短、更易读的代码。</li><li>无状态：函数式组件没有内部状态（state），它只接收props并返回一个React元素。因此，它被认为是无状态组件。</li><li>适用性广泛：函数式组件适用于简单的静态UI展示，或者当不需要内部状态管理和生命周期方法时。</li></ul><h2 id="2-类式组件（复杂组件）"><a href="#2-类式组件（复杂组件）" class="headerlink" title="2.类式组件（复杂组件）"></a>2.类式组件（复杂组件）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>类组件是通过继承<code>React</code>的<code>Component</code>类并使用ES6类语法来定义的。类组件具有更多的功能和灵活性，可以使用内部状态（<code>state</code>）和生命周期方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建类式组件</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(props);</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> &#123;count&#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 2 渲染组件到页面</span></span><br><span class="line">   <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>));</span><br></pre></td></tr></table></figure><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>执行<code>render</code>放在哪里?</p>            </div><ul><li>放在<code>MyCOmponent</code> 的原型对象上 供实例使用。</li></ul><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p><code>render</code>中的<code>this</code>是谁？?</p>            </div><ul><li><code>MyComponent</code> 的实例对象  &lt;==&gt; <code>MyComponent</code> 组件实例对象。</li></ul><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>执行<code>ReactDOM.render(）</code>之后发生了什么?</p>            </div><ul><li><code>React</code> 解析组件标签 找到了<code>MyComponent</code>组件</li><li>发现组件是使用类定义的 随后<code>new</code>出来该类的实例  并用该实例调用到原型上的<code>render</code>方法</li><li>将<code>rander</code>返回的虚拟<code>DOM</code>转为真实<code>DOM</code>呈现到页面上。</li></ul><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li>内部状态管理：类组件可以通过使用<code>this.state</code>对象来管理内部状态，并通过<code>setState</code>方法更新状态。</li><li>生命周期方法：类组件提供了一系列生命周期方法（如<code>componentDidMount</code>、<code>componentDidUpdate</code>等），可以用于在不同的阶段执行特定的逻辑。</li><li>适用于复杂逻辑：当组件需要处理复杂的状态管理、生命周期方法和性能优化时，类组件是更合适的选择。</li></ul>]]></content>
    
    
    <summary type="html">🍊React中定义组件的方式</summary>
    
    
    
    <category term="React" scheme="https://www.axcode.cn/categories/React/"/>
    
    
    <category term="React" scheme="https://www.axcode.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>vue3有关鉴权相关问题</title>
    <link href="https://www.axcode.cn/posts/e7ddffb7.html"/>
    <id>https://www.axcode.cn/posts/e7ddffb7.html</id>
    <published>2024-07-15T12:28:04.000Z</published>
    <updated>2024-08-31T10:34:31.906Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note blue no-icon flat"><p>需要后端同学配合，不同的用户登录，需要根据用户信息对菜单、按钮等权限进行处理。</p><p><img src="https://bu.dusays.com/2024/07/15/66951bc75943f.png" alt=""></p></div><h2 id="1-路由鉴权文件"><a href="#1-路由鉴权文件" class="headerlink" title="1.路由鉴权文件"></a>1.路由鉴权文件</h2><div class="note blue no-icon flat"><p>在src 下新建文件permission.ts 在入口文件main.ts引入并写入以下代码</p></div><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由鉴权:鉴权,项目当中路由能不能被的权限的设置(某一个路由什么条件下可以访问、什么条件下不可以访问)</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"><span class="comment">//setting 为公共头部文件</span></span><br><span class="line"><span class="keyword">import</span> setting <span class="keyword">from</span> <span class="string">&#x27;./setting&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> nprogress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span>;</span><br><span class="line"><span class="comment">//引入进度条样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;nprogress/nprogress.css&quot;</span>;</span><br><span class="line">nprogress.<span class="title function_">configure</span>(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">//获取用户相关的小仓库内部token数据,去判断用户是否登录成功</span></span><br><span class="line"><span class="keyword">import</span> useUserStore <span class="keyword">from</span> <span class="string">&#x27;./store/modules/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> userStore = <span class="title function_">useUserStore</span>(pinia);</span><br><span class="line"><span class="comment">//全局守卫:项目当中任意路由切换都会触发的钩子</span></span><br><span class="line"><span class="comment">//全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (<span class="attr">to</span>: <span class="built_in">any</span>, <span class="attr">from</span>: <span class="built_in">any</span>, <span class="attr">next</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`<span class="subst">$&#123;setting.title&#125;</span> - <span class="subst">$&#123;to.meta.title&#125;</span>`</span></span><br><span class="line">  <span class="comment">//to:你将要访问那个路由</span></span><br><span class="line">  <span class="comment">//from:你从来个路由而来</span></span><br><span class="line">  <span class="comment">//next:路由的放行函数</span></span><br><span class="line">  nprogress.<span class="title function_">start</span>();</span><br><span class="line">  <span class="comment">//获取token,去判断用户登录、还是未登录</span></span><br><span class="line">  <span class="keyword">let</span> token = userStore.<span class="property">token</span>;</span><br><span class="line">  <span class="comment">//获取用户名字</span></span><br><span class="line">  <span class="keyword">let</span> username = userStore.<span class="property">username</span>;</span><br><span class="line">  <span class="comment">//用户登录判断</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="comment">//登录成功,访问login,不能访问,指向首页</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//登录成功访问其余六个路由(登录排除)</span></span><br><span class="line">      <span class="comment">//有用户信息</span></span><br><span class="line">      <span class="keyword">if</span> (username) &#123;</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有用户信息,在守卫这里发请求获取到了用户信息再放行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//获取用户信息</span></span><br><span class="line">          <span class="keyword">await</span> userStore.<span class="title function_">userInfo</span>();</span><br><span class="line">          <span class="comment">//放行</span></span><br><span class="line">          <span class="comment">//万一:刷新的时候是异步路由,有可能获取到用户信息、异步路由还没有加载完毕,出现空白的效果</span></span><br><span class="line">          <span class="title function_">next</span>(&#123; ...to &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">//token过期:获取不到用户信息了</span></span><br><span class="line">          <span class="comment">//用户手动修改本地存储token</span></span><br><span class="line">          <span class="comment">//退出登录-&gt;用户相关的数据清空</span></span><br><span class="line">          <span class="keyword">await</span> userStore.<span class="title function_">userLogOut</span>();</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">path</span> &#125; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//用户未登录判断</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">path</span> &#125; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params"><span class="attr">to</span>: <span class="built_in">any</span>, <span class="attr">from</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  nprogress.<span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-路由拆分"><a href="#2-路由拆分" class="headerlink" title="2.路由拆分"></a>2.路由拆分</h2><div class="tip info"><p>将路由文件拆分为常量路由、异步路由</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量路由</span></span><br><span class="line">exprot <span class="keyword">const</span> constantRoute=[&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/login.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>, <span class="comment">// 命名路由</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;登录&#x27;</span>,</span><br><span class="line">      <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoute = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/layout/index.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="attr">children</span>:[]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-通过vue-router插件实现路由配置"><a href="#3-通过vue-router插件实现路由配置" class="headerlink" title="3.通过vue-router插件实现路由配置"></a>3.通过vue-router插件实现路由配置</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 此文件为路由总文件 index */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; constantRoute &#125; <span class="keyword">from</span> <span class="string">&quot;./routes&quot;</span>; <span class="comment">// 定义路由的文件</span></span><br><span class="line"><span class="comment">// 创建路由器</span></span><br><span class="line"><span class="keyword">let</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 模式默认为 hash</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: constantRoute,</span><br><span class="line">  <span class="comment">// 滚动行为</span></span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="4-在用户仓库中获取用户信息并进行处理"><a href="#4-在用户仓库中获取用户信息并进行处理" class="headerlink" title="4.在用户仓库中获取用户信息并进行处理"></a>4.在用户仓库中获取用户信息并进行处理</h2><h3 id="4-1-创建用户过滤当前用户需要展示的路由"><a href="#4-1-创建用户过滤当前用户需要展示的路由" class="headerlink" title="4.1 创建用户过滤当前用户需要展示的路由"></a>4.1 创建用户过滤当前用户需要展示的路由</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">filterAsyncRoute</span>(<span class="params"><span class="attr">asyncRoute</span>: <span class="built_in">any</span>, <span class="attr">routes</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> asyncRoute.<span class="title function_">filter</span>(<span class="function">(<span class="params"><span class="attr">item</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (routes.<span class="title function_">includes</span>(item.<span class="property">name</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = <span class="title function_">filterAsyncRoute</span>(item.<span class="property">children</span>, routes)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-获取用户信息接口-调用过滤方法展示当前用户需要展示的路由"><a href="#4-2-获取用户信息接口-调用过滤方法展示当前用户需要展示的路由" class="headerlink" title="4.2 获取用户信息接口 调用过滤方法展示当前用户需要展示的路由"></a>4.2 获取用户信息接口 调用过滤方法展示当前用户需要展示的路由</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装lodash 使用cloneDeep实现深拷贝 不能使用JSON会有问题</span></span><br><span class="line"><span class="keyword">import</span> cloneDeep <span class="keyword">from</span> <span class="string">&#x27;lodash/cloneDeep&#x27;</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">userInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">result</span>: userInfoResponseData = <span class="keyword">await</span> <span class="title function_">userInfo</span>();</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">//计算当前用户需要展示的异步路由</span></span><br><span class="line">    <span class="keyword">let</span> userAsyncRoute = <span class="title function_">filterAsyncRoute</span>(<span class="title function_">cloneDeep</span>(asyncRoute), result.<span class="property">data</span>.<span class="property">routes</span>);</span><br><span class="line">    <span class="comment">//菜单需要的数据整理完毕</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">menuRoutes</span> = [...constantRoute, ...userAsyncRoute, ...anyRoute];</span><br><span class="line">    <span class="comment">//目前路由器管理的只有常量路由:用户计算完毕异步路由、任意路由动态追加</span></span><br><span class="line">    [...userAsyncRoute, ...anyRoute].<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="attr">route</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      router.<span class="title function_">addRoute</span>(route);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Ok&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(result.<span class="property">message</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-在退出登录时-需要让路由保持常量路由"><a href="#4-3-在退出登录时-需要让路由保持常量路由" class="headerlink" title="4.3 在退出登录时 需要让路由保持常量路由"></a>4.3 在退出登录时 需要让路由保持常量路由</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menuRoutes = constantRoute ;</span><br></pre></td></tr></table></figure><h2 id="5-关于全局按钮的鉴权"><a href="#5-关于全局按钮的鉴权" class="headerlink" title="5.关于全局按钮的鉴权"></a>5.关于全局按钮的鉴权</h2><div class="tip bell"><p>在获取用户信息一并拿到按钮的权限，然后通过自定义指令处理</p></div><h3 id="5-1-用户仓库初始化并获取用户信息"><a href="#5-1-用户仓库初始化并获取用户信息" class="headerlink" title="5.1 用户仓库初始化并获取用户信息"></a>5.1 用户仓库初始化并获取用户信息</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户仓库初始化</span></span><br><span class="line"><span class="attr">state</span>: (): <span class="function"><span class="params">userState</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">buttons</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">// 获取用户信成功后得到按钮权限信息</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">userInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">buttons</span> = result.<span class="property">data</span>.<span class="property">buttons</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-src下新建directive文件夹-并新建自定义指令文件并写于以下内容"><a href="#5-2-src下新建directive文件夹-并新建自定义指令文件并写于以下内容" class="headerlink" title="5.2 src下新建directive文件夹 并新建自定义指令文件并写于以下内容"></a>5.2 src下新建directive文件夹 并新建自定义指令文件并写于以下内容</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src下新建directive文件夹 并新建自定义指令文件并写于以下内容</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&quot;@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useUserStroe <span class="keyword">from</span> <span class="string">&quot;@/store/modules/user&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> userState = <span class="title function_">useUserStroe</span>(pinia);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isHasButton</span> = (<span class="params"><span class="attr">app</span>: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/** 获取对应的仓库 */</span></span><br><span class="line">  <span class="comment">/** 全局自定义指令 实现按钮权限 */</span></span><br><span class="line">  app.<span class="title function_">directive</span>(<span class="string">&#x27;has&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">/** 全局指令挂载完毕后执行一次 */</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"><span class="attr">el</span>: <span class="built_in">any</span>, <span class="attr">options</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">      <span class="comment">//自定义指令右侧的数值:如果在用户信息buttons数组当中没有</span></span><br><span class="line">      <span class="comment">//从DOM树上干掉</span></span><br><span class="line">      <span class="keyword">if</span> (!userState.<span class="property">buttons</span>.<span class="title function_">includes</span>(options.<span class="property">value</span>)) &#123;</span><br><span class="line">        el.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-在main-ts中引入自定义指令"><a href="#5-3-在main-ts中引入自定义指令" class="headerlink" title="5.3 在main.ts中引入自定义指令"></a>5.3 在main.ts中引入自定义指令</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入自定义指令</span></span><br><span class="line"><span class="keyword">import</span> &#123; isHasButton &#125; <span class="keyword">from</span> <span class="string">&quot;./directive/has&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="title function_">isHasButton</span>(app);</span><br></pre></td></tr></table></figure><h3 id="5-4-在页面button按钮处添加以下代码"><a href="#5-4-在页面button按钮处添加以下代码" class="headerlink" title="5.4 在页面button按钮处添加以下代码"></a>5.4 在页面button按钮处添加以下代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button v-has=&quot;`btn.Trademark.add`&quot;&gt;添加&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍒vue3有关鉴权相关问题</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ts基础手记 (二)</title>
    <link href="https://www.axcode.cn/posts/370b9c5f.html"/>
    <id>https://www.axcode.cn/posts/370b9c5f.html</id>
    <published>2024-06-18T14:48:42.000Z</published>
    <updated>2024-06-18T15:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：面向对象"><a href="#第二章：面向对象" class="headerlink" title="第二章：面向对象"></a>第二章：面向对象</h1><h2 id="1-关于面向对象"><a href="#1-关于面向对象" class="headerlink" title="1. 关于面向对象"></a>1. 关于面向对象</h2><div class="note blue no-icon flat"><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p><ul><li>举例来说：<ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象</li></ul></li></ul><p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p><p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p></div><h2 id="2-类（class）"><a href="#2-类（class）" class="headerlink" title="2. 类（class）"></a>2. 类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li><p>定义类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-面向对象的特点"><a href="#3-面向对象的特点" class="headerlink" title="3. 面向对象的特点"></a>3. 面向对象的特点</h2><ul><li><p>封装</p><ul><li><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p></li><li><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li><li><p>示例：</p><ul><li><p>public</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li><li><p>protected</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li><p>private</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>属性存取器</p><ul><li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p></li><li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p></li><li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p></li><li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>; <span class="comment">// 通过setter修改name属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态属性</p><ul><li><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p></li><li><p>静态属性（方法）使用static开头</p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tools</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params"><span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>this</p><ul><li>在类中，使用this表示当前对象</li></ul></li></ul></li><li><p>继承</p><ul><li><p>继承时面向对象中的又一个特性</p></li><li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><ul><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过继承可以在不修改类的情况下完成对类的扩展</p></li><li><p>重写</p><ul><li><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p></li><li><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>在子类中可以使用super来完成对父类的引用</li></ul></li></ul></li><li><p>抽象类（abstract class）</p><ul><li><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现。</p></li></ul></li></ul></li></ul><h2 id="4-接口（Interface）"><a href="#4-接口（Interface）" class="headerlink" title="4. 接口（Interface）"></a>4. 接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li><p>示例（检查对象类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"><span class="attr">per</span>: <span class="title class_">Person</span></span>)&#123;</span><br><span class="line">    per.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>示例（实现）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-泛型（Generic）"><a href="#5-泛型（Generic）" class="headerlink" title="5. 泛型（Generic）"></a>5. 泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。</p><ul><li><p>举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"><span class="attr">arg</span>: <span class="built_in">any</span></span>): <span class="built_in">any</span>&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p></li><li><p>使用泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</p></li><li><p>那么如何使用上边的函数呢？</p><ul><li><p>方式一（直接使用）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</li></ul></li><li><p>方式二（指定类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>也可以在函数后手动指定泛型</li></ul></li></ul></li><li><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用泛型时，完全可以将泛型当成是一个普通的类去使用</li></ul></li><li><p>类中同样可以使用泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">prop</span>: T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">🍹ts基础手记 (二)</summary>
    
    
    
    <category term="Ts" scheme="https://www.axcode.cn/categories/Ts/"/>
    
    
    <category term="Ts" scheme="https://www.axcode.cn/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>关于深浅拷贝的那些事</title>
    <link href="https://www.axcode.cn/posts/59d18d96.html"/>
    <id>https://www.axcode.cn/posts/59d18d96.html</id>
    <published>2024-06-15T09:29:32.000Z</published>
    <updated>2024-08-08T10:42:38.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip "><p>此文部分来自于公众号作者 <code>大迁世界</code> 本站只做记录使用，如有侵权，请联系站长删除！</p></div><div class="note blue no-icon flat"><p>所谓深浅拷贝，其实都是进行复制，主要区别在于复制出来的新对象和原来的对象时候会相互影响。<br>深浅拷贝的区分：B 复制 A，如何A 发生变化 B跟着变化 浅拷贝<br>反之， 如果 B 不发生变化 则为深拷贝。<br>浅拷贝 A B 指向同一个地址 所以 A受影响 B也会受影响</p></div><h2 id="1-深浅拷贝实例"><a href="#1-深浅拷贝实例" class="headerlink" title="1. 深浅拷贝实例"></a>1. 深浅拷贝实例</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> a_clone = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === a_clone);</span><br><span class="line">a_clone[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a_clone);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e871b04.webp" alt=""></p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"><span class="keyword">var</span> obj_extend =$.<span class="title function_">extend</span>(<span class="literal">true</span>,&#123;&#125;,obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj_extend === obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj_extend);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e8725ef.webp" alt=""></p><div class="tip "><p>要深入了解深浅拷贝必选先要了解其原理，这就不得不说到ECMAScript中的数据类型。</p></div><h2 id="2-基本类型和引用类型"><a href="#2-基本类型和引用类型" class="headerlink" title="2. 基本类型和引用类型"></a>2. 基本类型和引用类型</h2><h3 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h3><p>基本类型：undefined,null,布尔值（Boolean）,字符串(String),数值(Number)<br>引用类型：统称为Object类型，细分为：Function、Date、Array、Object类型等。</p><h3 id="2-2-不同的数据存储形式"><a href="#2-2-不同的数据存储形式" class="headerlink" title="2.2 不同的数据存储形式"></a>2.2 不同的数据存储形式</h3><p>简单来说, <code>基本数据类型</code>保存在<code>栈内存</code> <code>引用类型</code>保存在<code>堆内存</code></p><h4 id="2-2-1-栈内存"><a href="#2-2-1-栈内存" class="headerlink" title="2.2.1 栈内存"></a>2.2.1 栈内存</h4><p>栈内存中分别存储着变量的标识符以及变量的值</p><p><img src="https://bu.dusays.com/2024/06/15/666d60e871c6d.webp" alt=""></p><p>即：<code>var a = &quot;A&quot;</code></p><p>在栈内存中是这样的</p><p><img src="https://bu.dusays.com/2024/06/15/666d60e8704f6.webp" alt=""></p><h4 id="2-1-2-堆内存"><a href="#2-1-2-堆内存" class="headerlink" title="2.1.2 堆内存"></a>2.1.2 堆内存</h4><p>栈内存存储的是变量的标识符以及对象在堆内存中的存储地址，但需要访问引用类型（对象、数组等）的值时，首先需要从栈中获得该对象的地址指针，然后再从对应的堆内存中取得所需的数据。</p><p><img src="https://bu.dusays.com/2024/06/15/666d63b289425.webp" alt=""></p><p>即：<code>var a = &#123;name:“jack”&#125;;</code><br>在内存中是这样的：</p><p><img src="https://bu.dusays.com/2024/06/15/666d60e86ea7b.webp" alt=""></p><h2 id="3-不同类型的复制形式"><a href="#3-不同类型的复制形式" class="headerlink" title="3. 不同类型的复制形式"></a>3. 不同类型的复制形式</h2><h3 id="3-1-基本类型的复制"><a href="#3-1-基本类型的复制" class="headerlink" title="3.1 基本类型的复制"></a>3.1 基本类型的复制</h3><p>当你在复制时，相当于把值也一并复制给了新的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e86dc69.webp" alt=""></p><p>改变a的值，并不会影响到b。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e861cae.webp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e86d0e8.webp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4bb526.webp" alt=""></p><h3 id="3-2-引用类型的复制"><a href="#3-2-引用类型的复制" class="headerlink" title="3.2 引用类型的复制"></a>3.2 引用类型的复制</h3><p>当复制引用类型时，实际上只是赋值起指向的内存地址，即原来的变量与复制的新变量指向了同一个东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123;<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line">a.<span class="property">age</span> =<span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d65fa94b27.webp" alt=""></p><p>可以看得出来：改变a的值，也会影响b的值<br>内存中是这样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60e86ea7b.webp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4b5528.webp" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">age</span> = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4b83b3.webp" alt=""></p><div class="note blue no-icon flat"><p>看完上面之后，是不是就明白了。所谓深浅拷贝：<br>对于仅仅是复制了引用（地址）,换言之，原来的变量和新的变量指向了同一个东西，彼此之间的操作会互相影响，为<code>浅拷贝</code>。<br>反言之。如果是在堆中重新分配内存，拥有不同的地址，但是值是一样的，复制后的对象与原来的对象是完全隔离，互不影响的，为 <code>深拷贝</code></p></div><div class="tip home"><p>深浅拷贝的主要区别：复制的是引用（地址）还是复制的是实例。</p><p>接下来就对上述实例进行深拷贝的实现</p></div><h2 id="4-实现深拷贝方式"><a href="#4-实现深拷贝方式" class="headerlink" title="4. 实现深拷贝方式"></a>4. 实现深拷贝方式</h2><h3 id="4-1-利用递归方式-对属性中所有的引用类型的值，遍历到是基本类型的值为止。"><a href="#4-1-利用递归方式-对属性中所有的引用类型的值，遍历到是基本类型的值为止。" class="headerlink" title="4.1 利用递归方式 对属性中所有的引用类型的值，遍历到是基本类型的值为止。"></a>4.1 利用递归方式 对属性中所有的引用类型的值，遍历到是基本类型的值为止。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCLone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> targetObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)?[]:&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> keys <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(keys))&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj[keys] &amp;&amp; <span class="keyword">typeof</span> obj[keys] === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">                targetObj[keys] = <span class="title function_">deepCLone</span>(obj[keys])</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                targetObj[keys] = obj[keys]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a =&#123;<span class="attr">name</span>:<span class="string">&quot;jack&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">deepCLone</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b ===a);</span><br><span class="line">a.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4b70bb.webp" alt=""></p><h3 id="4-2-jQuery中的-extend复制方法"><a href="#4-2-jQuery中的-extend复制方法" class="headerlink" title="4.2 jQuery中的 extend复制方法"></a>4.2 jQuery中的 extend复制方法</h3><div class="tip home"><p>可以用来扩展对象，这个方法可以传入一个参数：deep(true or<br>false),表示是否执行深复制(如果执行深复制则会执行递归复制)</p></div><ul><li><p>深拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;xixi&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">company</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;腾讯&quot;</span>,<span class="attr">address</span>:<span class="string">&quot;深圳&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_extend =$.<span class="title function_">extend</span>(<span class="literal">true</span>,&#123;&#125;,obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === obj_extend);</span><br><span class="line">obj.<span class="property">company</span>.<span class="property">name</span>=<span class="string">&quot;阿里&quot;</span>;</span><br><span class="line">obj.<span class="property">name</span>=<span class="string">&quot;albabba&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj_extend);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4b6700.webp" alt=""></p></li><li><p>浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;xixi&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">company</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;腾讯&quot;</span>,<span class="attr">address</span>:<span class="string">&quot;深圳&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_extend =$.<span class="title function_">extend</span>(<span class="literal">false</span>,&#123;&#125;,obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === obj_extend);</span><br><span class="line">obj.<span class="property">company</span>.<span class="property">name</span>=<span class="string">&quot;阿里&quot;</span>;</span><br><span class="line">obj.<span class="property">name</span>=<span class="string">&quot;albabba&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj_extend);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4af9db.webp" alt=""></p></li></ul><div class="tip bolt"><p>从company的变化可以看出，貌似是浅拷贝，但是name又貌似是深拷贝，这是何解。</p></div><div class="note blue no-icon flat"><p>其实，Array的slice 和concat方法和jQuery中的extend复制方法，都是会复制第一层的值，对于第一层的值都是深拷贝，而到第二层的时候 Array的slice和concat方法就是复制引用，jQuery中的extend复制方法则取决于你的第一个参数，也就是时候进行递归复制。<br>所谓第一层 就是 key所对应的value值是基本数据类型，也就是像实例中的name，age，而对于value值是引用类型 则为第二层，也就是像上面的company。</p></div><div class="tip cogs"><p>顺便 我们可以试一下 slice 和concat</p></div><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span>  b = a.<span class="title function_">slice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === a);</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4a7a02.webp" alt=""></p><h4 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span>  b = a.<span class="title function_">concat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === a);</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4a7a02.webp" alt=""></p><p>看似是深拷贝，其实不然，下面的例子就说明了一切</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b= a.<span class="title function_">slice</span>();</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4ab243.webp" alt=""></p><p class='p red'>这就很明显的看出来了，上面所述，第一层是深拷贝 第二层 是引用。</p><h3 id="4-3-JSON对象的parse和stringify"><a href="#4-3-JSON对象的parse和stringify" class="headerlink" title="4.3 JSON对象的parse和stringify"></a>4.3 JSON对象的parse和stringify</h3><ul><li>JSON对象中的stringify可以把一个js对象序列化为一个JSON字符串</li><li>parse可以把JSON字符串反序化为一个js对象，这两个方法实现的是深拷贝</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">name</span>:<span class="string">&#x27;xixi&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">company</span>:&#123;<span class="attr">name</span>:<span class="string">&#x27;TX&#x27;</span>,<span class="attr">address</span>:<span class="string">&#x27;深圳&#x27;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj_json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj === obj_json);</span><br><span class="line">obj.<span class="property">name</span>=<span class="string">&quot;ali&quot;</span>;</span><br><span class="line">obj.<span class="property">company</span>.<span class="property">name</span>=<span class="string">&quot;AL&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj_json);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666d60d4b310f.webp" alt=""></p><h2 id="5-如何实现对循环引用的深拷贝"><a href="#5-如何实现对循环引用的深拷贝" class="headerlink" title="5. 如何实现对循环引用的深拷贝"></a>5. 如何实现对循环引用的深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span>&#125;&#125;</span><br><span class="line">obj.<span class="property">o</span> = obj</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note blue no-icon flat"><p>obj中的属性o指向obj本身，在深拷贝过程中就会出现循环引用问题<br>如果还使用上述的算法，就会出现调用栈溢出问题</p><p>因此，要解决循环引用问题的话，需要使用一个<code>Map</code>/<code>WeakMap</code>来存放已经拷贝过的对象<br>key为旧对象，value为新对象<br>在先拷贝属性之前，先去map中查找是否已经被处理过，如果被处理过，直接返回value值<br>在拷贝属性之前，把新、旧对象保存到map中</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果传入的是值类型/null，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj != <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (hash.<span class="title function_">get</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> hash.<span class="title function_">get</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    result = []</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash.<span class="title function_">set</span>(obj, result)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, key)) &#123;</span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key], hash)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">address</span>: &#123;<span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span>&#125;&#125;</span><br><span class="line">  obj.<span class="property">o</span> = obj</span><br><span class="line">  obj.<span class="property">address</span>.<span class="property">z</span> = obj</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">deepClone</span>(obj))</span><br><span class="line">  obj.<span class="property">address</span>.<span class="property">x</span> = <span class="number">140</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/15/666da84737b0f.png" alt=""></p><h2 id="6-structuredClone"><a href="#6-structuredClone" class="headerlink" title="6. structuredClone()"></a>6. structuredClone()</h2><div class="tip info"><p>JavaScript中深拷贝对象的最简单方法,可以深度复制任何对象。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Tari&#x27;</span>, <span class="attr">friends</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;Messi&#x27;</span> &#125;] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clonedObj = <span class="title function_">structuredClone</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span> === clonedObj); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friends</span> === clonedObj.<span class="property">friends</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="6-1-轻松克隆循环引用"><a href="#6-1-轻松克隆循环引用" class="headerlink" title="6.1 轻松克隆循环引用"></a>6.1 轻松克隆循环引用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&#x27;Toyota&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 👆 循环引用</span></span><br><span class="line">car.<span class="property">basedOn</span> = car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cloned = <span class="title function_">structuredClone</span>(car);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">basedOn</span> === cloned.<span class="property">basedOn</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 👇 循环引用被克隆</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car === car.<span class="property">basedOn</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是永远无法用<code>JSON</code> <code>stringify</code>/<code>parse</code>技巧实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&#x27;Toyota&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">car.<span class="property">basedOn</span> = car;</span><br><span class="line"><span class="keyword">const</span> cloned = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(car));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">basedOn</span> === cloned.<span class="property">basedOn</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car === car.<span class="property">basedOn</span>); </span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/08/06/66b1d36067f1c.png" alt=""></p><h3 id="6-2-可对不限层次的对象进行拷贝"><a href="#6-2-可对不限层次的对象进行拷贝" class="headerlink" title="6.2 可对不限层次的对象进行拷贝"></a>6.2 可对不限层次的对象进行拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">      <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">d</span>: &#123;</span><br><span class="line">          <span class="attr">e</span>: <span class="string">&#x27;Coding Beauty&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clone = <span class="title function_">structuredClone</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span> === obj.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="property">d</span>.<span class="property">e</span>); <span class="comment">// Coding Beauty</span></span><br></pre></td></tr></table></figure><h3 id="6-3-structuredClone-的局限性"><a href="#6-3-structuredClone-的局限性" class="headerlink" title="6.3 structuredClone()的局限性"></a>6.3 <code>structuredClone()</code>的局限性</h3><h4 id="6-3-1-无法克隆函数或方法"><a href="#6-3-1-无法克隆函数或方法" class="headerlink" title="6.3.1 无法克隆函数或方法"></a>6.3.1 无法克隆函数或方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="string">&#x27;Toyota&#x27;</span>,</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vroom vroom...&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">car.<span class="property">basedOn</span> = car;</span><br><span class="line"><span class="keyword">const</span> cloned = <span class="title function_">structuredClone</span>(car);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/08/06/66b1d6881c177.png" alt=""></p><p>报错信息：”Failed to execute ‘structuredClone’ on ‘Window’: move()’ 表示在尝试使用 <code>structuredClone</code> 方法复制或序列化一个对象时遇到了问题。<code>structuredClone</code> 是一个用于深度复制对象的方法，它能够正确复制包括函数在内的所有值。</p><p>问题可能出现在 <code>move()</code> 函数上，因为在尝试序列化或复制该函数时遇到了问题。<code>structuredClone</code> 不能复制不可序列化的值，比如函数或 DOM 节点。</p><h4 id="6-3-2-无法克隆DOM元素"><a href="#6-3-2-无法克隆DOM元素" class="headerlink" title="6.3.2 无法克隆DOM元素"></a>6.3.2 无法克隆DOM元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> testClone = <span class="title function_">structuredClone</span>(test);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(testClone);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/08/06/66b1d7ee6037d.png" alt=""></p><h4 id="6-3-3-不保留RegExp的lastIndex属性"><a href="#6-3-3-不保留RegExp的lastIndex属性" class="headerlink" title="6.3.3 不保留RegExp的lastIndex属性"></a>6.3.3 不保留<code>RegExp</code>的<code>lastIndex</code>属性</h4><p>虽然不会去克隆<code>正则表达式</code>，但这是值得注意的一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/beauty/g</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Coding Beauty: JS problems are solved at Coding Beauty&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="property">index</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="property">lastIndex</span>); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regexClone = <span class="title function_">structuredClone</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexClone.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="6-4-其他的限制"><a href="#6-4-其他的限制" class="headerlink" title="6.4 其他的限制"></a>6.4 其他的限制</h3><div class="tip warning"><p>了解这些限制很重要，以避免使用该函数时出现意外行为。</p></div><p><strong>部分克隆，部分移动</strong></p><p>这是一个更复杂的情况。</p><p>你将内部对象从源对象转移到克隆对象，而不是复制。</p><p>这意味着源对象中没有留下任何可以改变的东西：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uInt8Array = <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>(</span><br><span class="line">    &#123; <span class="attr">length</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">16</span> &#125;,</span><br><span class="line">    <span class="function">(<span class="params">v, i</span>) =&gt;</span> i</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transferred = <span class="title function_">structuredClone</span>(uInt8Array, &#123;</span><br><span class="line">    <span class="attr">transfer</span>: [uInt8Array.<span class="property">buffer</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uInt8Array.<span class="property">byteLength</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>总的来说，<code>structuredClone()</code>是JavaScript开发者工具箱中的一个宝贵补充，使对象克隆比以往任何时候都更容易。</p>]]></content>
    
    
    <summary type="html">🥭关于深浅拷贝的那些事</summary>
    
    
    
    <category term="Js" scheme="https://www.axcode.cn/categories/Js/"/>
    
    
    <category term="Js" scheme="https://www.axcode.cn/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>Vue判断用户长时间未操作清除token并退出登录</title>
    <link href="https://www.axcode.cn/posts/6263542e.html"/>
    <id>https://www.axcode.cn/posts/6263542e.html</id>
    <published>2024-06-14T14:50:10.000Z</published>
    <updated>2024-07-28T10:50:39.607Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> &lt;template&gt;</span><br><span class="line">    &lt;div id =&quot;app&quot; @click=&quot;isDo()&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">exoprt default&#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        lastTime:null, //第一次点击事件</span><br><span class="line">        currentTime:null,  //当前点击事件</span><br><span class="line">        timeOut:30*60*1000 // 设置超时时间：30分钟</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    this.lastTime  = new Date().getTime();  // 网页第一次打开时，记录当前时间</span><br><span class="line">  &#125;,</span><br><span class="line">   mounted()&#123;</span><br><span class="line">      var quitTIme = window.setInterval(this.testTime,1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    isDo()&#123;</span><br><span class="line">      this.currentTime = new Date().getTime(); // 记录当前点击的时间</span><br><span class="line">      if(this.currentTIme - this.lastTime &gt; this.timeOut)&#123; //判断上次最后一次的点击时间和最新的点击时间间隔时候大于30分钟</span><br><span class="line">      // 这里写状态已过期后执行的操作</span><br><span class="line">      localStorage.removeItem(&quot;token&quot;);</span><br><span class="line">       this.$router.push(&#123; path: &#x27;/login&#x27; &#125;);</span><br><span class="line">        // 清除定时器</span><br><span class="line">       window.clearInterval(quitTIme);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        this.lastTime  = new Date().getTime(); //如果30分之内点击，则把最新时间记录覆盖掉之前存的最后一次点击时间</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍏Vue判断用户长时间未操作清除token并退出登录</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ts基础手记（一）</title>
    <link href="https://www.axcode.cn/posts/8c4a663e.html"/>
    <id>https://www.axcode.cn/posts/8c4a663e.html</id>
    <published>2024-06-14T10:34:12.000Z</published>
    <updated>2024-06-15T14:50:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="1-TypeScript简介"><a href="#1-TypeScript简介" class="headerlink" title="1. TypeScript简介"></a>1. TypeScript简介</h2><div class="note blue no-icon flat"><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol></div><h2 id="2-TypeScript-开发环境搭建"><a href="#2-TypeScript-开发环境搭建" class="headerlink" title="2. TypeScript 开发环境搭建"></a>2. TypeScript 开发环境搭建</h2><ol><li><p>下载Node.js</p><ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li><p>安装Node.js</p></li><li><p>使用npm全局安装typescript</p><ul><li>进入命令行</li><li>输入：npm i -g typescript</li></ul></li><li><p>创建一个ts文件</p></li><li><p>使用tsc对ts文件进行编译</p><ul><li><p>进入命令行</p></li><li><p>进入ts文件所在目录</p></li><li><p>执行命令：tsc xxx.ts</p></li></ul></li></ol><h2 id="3-基础类型"><a href="#3-基础类型" class="headerlink" title="3. 基础类型"></a>3. 基础类型</h2><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p></li><li><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制x</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">例子</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">number</td><td style="text-align:center">1, -33, 2.5</td><td style="text-align:center">任意数字</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">‘hi’, “hi”, <code>hi</code></td><td style="text-align:center">任意字符串</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">true、false</td><td style="text-align:center">布尔值true或false</td></tr><tr><td style="text-align:center">字面量</td><td style="text-align:center">其本身</td><td style="text-align:center">限制变量的值就是该字面量的值</td></tr><tr><td style="text-align:center">any</td><td style="text-align:center">*</td><td style="text-align:center">任意类型</td></tr><tr><td style="text-align:center">unknown</td><td style="text-align:center">*</td><td style="text-align:center">类型安全的any</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center">空值（undefined）</td><td style="text-align:center">没有值（或undefined）</td></tr><tr><td style="text-align:center">never</td><td style="text-align:center">没有值</td><td style="text-align:center">不能是任何值</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">{name:’孙悟空’}</td><td style="text-align:center">任意的JS对象</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">[1,2,3]</td><td style="text-align:center">任意JS数组</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">[4,5]</td><td style="text-align:center">元素，TS新增类型，固定长度数组</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">enum{A, B}</td><td style="text-align:center">枚举，TS中新增类型</td></tr></tbody></table></div><ul><li><p>number</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>boolean</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>string</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>any</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>unknown</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>void</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>never</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params"><span class="attr">message</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>object（没啥用）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>array</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>tuple</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>enum</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二种</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="4-编译选项"><a href="#4-编译选项" class="headerlink" title="4. 编译选项"></a>4. 编译选项</h2><ul><li><p>自动编译文件</p><ul><li><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p></li><li><p>示例：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tsc</span> <span class="string">xxx.ts -w</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>自动编译整个项目</p><ul><li><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p></li><li><p>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</p></li><li><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p></li><li><p>配置选项：</p><ul><li><p>include</p><ul><li><p>定义希望被编译文件所在的目录</p></li><li><p>默认值：[“**/*“]</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>上述示例中，所有src目录和tests目录下的文件都会被编译</li></ul></li></ul></li><li><p>exclude</p><ul><li><p>定义需要排除在外的目录</p></li><li></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>上述示例中，src下hello目录下的文件都不会被编译</li></ul></li></ul></li><li><p>extends</p><ul><li><p>定义被继承的配置文件</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><ul><li>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</li></ul></li></ul></li><li><p>files</p><ul><li><p>指定被编译文件的列表，只有需要编译的文件少时才会用到</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><ul><li>列表中的文件都会被TS编译器所编译</li></ul></li><li><p>compilerOptions</p><ul><li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p></li><li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p>target</p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</li></ul></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>module</p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>设置后编译后的js文件将会生成到dist目录</li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>allowJs</p><ul><li>是否对js文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul></li></ul></li><li><p>严格检查</p><ul><li>strict<ul><li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的any类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的this</li></ul></li><li>strictBindCallApply<ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="5-webpack"><a href="#5-webpack" class="headerlink" title="5. webpack"></a>5. webpack</h2><ul><li><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</p></li><li><p>步骤：</p><ol><li><p>初始化项目</p><ul><li>进入项目根目录，执行命令 <code>npm init -y</code><ul><li>主要作用：创建package.json文件</li></ul></li></ul></li><li><p>下载构建工具</p><ul><li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul><li>共安装了7个包<ul><li>webpack<ul><li>构建工具webpack</li></ul></li><li>webpack-cli<ul><li>webpack的命令行工具</li></ul></li><li>webpack-dev-server<ul><li>webpack的开发服务器</li></ul></li><li>typescript<ul><li>ts编译器</li></ul></li><li>ts-loader<ul><li>ts加载器，用于在webpack中编译ts文件</li></ul></li><li>html-webpack-plugin<ul><li>webpack中html插件，用来自动创建html文件</li></ul></li><li>clean-webpack-plugin<ul><li>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li></ul></li></ul></li><li><p>根目录下创建webpack的配置文件webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;TS测试&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改package.json添加如下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...略...</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器。</li></ol><h2 id="6-Babel"><a href="#6-Babel" class="headerlink" title="6. Babel"></a>6. Babel</h2><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><ol><li><p>安装依赖包：</p><ul><li><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li><li>共安装了4个包，分别是：<ul><li>@babel/core<ul><li>babel的核心工具</li></ul></li><li>@babel/preset-env<ul><li>babel的预定义环境</li></ul></li><li>@babel-loader<ul><li>babel在webpack中的加载器</li></ul></li><li>core-js<ul><li>core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li></ul></li><li><p>修改webpack.config.js配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">...略...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;targets&quot;</span>:&#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure></li></ol><ul><li>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
    <summary type="html">🍋‍🟩ts基础手记 (一)</summary>
    
    
    
    <category term="Ts" scheme="https://www.axcode.cn/categories/Ts/"/>
    
    
    <category term="Ts" scheme="https://www.axcode.cn/tags/Ts/"/>
    
  </entry>
  
  <entry>
    <title>彻底搞懂浏览器Event-loop</title>
    <link href="https://www.axcode.cn/posts/aedb9f78.html"/>
    <id>https://www.axcode.cn/posts/aedb9f78.html</id>
    <published>2024-06-12T10:37:07.000Z</published>
    <updated>2024-08-08T10:43:02.909Z</updated>
    
    <content type="html"><![CDATA[<div class="tip "><p>此文来自于掘金作者 <a href="https://juejin.cn/user/3368559358523944/posts">无名之苝</a> 本站只做记录使用，如有侵权，请联系站长删除！</p></div><h2 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1. 预备知识"></a>1. 预备知识</h2><div class="note blue no-icon flat"><p>JavaScript的运行机制:</p><ol><li><p>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p></li><li><p>主线程之外，还存在”任务队列”(task queue)。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p></li><li><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>主线程不断重复上面的第三步</p><p>概括即是: 调用栈中的同步任务都执行完毕，栈内被清空了，就代表主线程空闲了，这个时候就会去任务队列中按照顺序读取一个任务放入到栈中执行。每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环读取-执行的操作</p></li></ol></div><div class="note blue no-icon flat"><p>一个事件循环中有一个或者是多个任务队列</p></div><div class="note blue no-icon flat"><p>JavaScript中有两种异步任务</p><ol><li>宏任务: script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering</li><li>微任务: process.nextTick（Nodejs）, Promises, Object.observe, MutationObserver</li></ol></div><h2 id="2-事件循环-event-loop-是什么"><a href="#2-事件循环-event-loop-是什么" class="headerlink" title="2. 事件循环(event-loop)是什么?"></a>2. 事件循环(event-loop)是什么?</h2><p>主线程从”任务队列”中读取执行事件，这个过程是循环不断的，这个机制被称为事件循环。此机制具体如下:主线程会不断从任务队列中按顺序取任务执行，每执行完一个任务都会检查microtask队列是否为空（执行完一个任务的具体标志是函数执行栈为空），如果不为空则会一次性执行完所有microtask。然后再进入下一个循环去任务队列中取下一个任务执行。</p><div class="note blue no-icon flat"><p>详细说明</p><ol><li>选择当前要执行的宏任务队列，选择一个最先进入任务队列的宏任务，如果没有宏任务可以选择，则会跳转至microtask的执行步骤。</li><li>将事件循环的当前运行宏任务设置为已选择的宏任务。</li><li>运行宏任务。</li><li>将事件循环的当前运行任务设置为null。</li><li>将运行完的宏任务从宏任务队列中移除。</li><li>microtasks步骤：进入microtask检查点。</li><li>更新界面渲染。</li><li>返回第一步。</li></ol></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><strong>执行进入microtask检查的的具体步骤如下:</strong></p></div> <ol><li>设置进入microtask检查点的标志为true。</li><li>当事件循环的微任务队列不为空时：选择一个最先进入microtask队列的microtask；设置事件循环的当前运行任务为已选择的microtask；运行microtask；设置事件循环的当前运行任务为null；将运行结束的microtask从microtask队列中移除。</li><li>对于相应事件循环的每个环境设置对象（environment settings object）,通知它们哪些promise为rejected。</li><li>清理indexedDB的事务。</li><li>设置进入microtask检查点的标志为false。</li></ol><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p><strong>需要注意的是:当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件, 然后再去宏任务队列中取出一个事件。同一次事件循环中, 微任务永远在宏任务之前执行，如下图所示</strong></p></div> <p><img src="https://bu.dusays.com/2024/06/12/666985645ffc7.png" alt=""></p><h3 id="3-Event-loop-是如何工作的？"><a href="#3-Event-loop-是如何工作的？" class="headerlink" title="3. Event-loop 是如何工作的？"></a>3. Event-loop 是如何工作的？</h3><h3 id="先看一个简单的示例"><a href="#先看一个简单的示例" class="headerlink" title="先看一个简单的示例"></a>先看一个简单的示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout1&quot;</span>);</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思考一下, 运行结果是什么？</p><p>运行结果为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br><span class="line">setTimeout1</span><br><span class="line"><span class="number">222</span></span><br><span class="line">setTimeout2</span><br></pre></td></tr></table></figure><div class="tip bell"><p>细说一下, JS引擎是如何执行这段代码的:</p></div><div class="note blue no-icon flat"><ol><li>主线程上没有需要执行的代码</li><li>接着遇到setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在下一次的事件循环中执行)。</li><li>接着遇到setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在再下一次的事件循环中执行)。</li><li>首先检查微任务队列, 即 microtask队列，发现此队列不为空，执行第一个promise的then回调，输出 ‘111’。</li><li>此时microtask队列为空，进入下一个事件循环, 检查宏任务队列，发现有 setTimeout的回调函数，立即执行回调函数输出 ‘setTimeout1’,检查microtask 队列，发现队列不为空，执行promise的then回调，输出’222’，microtask队列为空，进入下一个事件循环。</li><li>检查宏任务队列，发现有 setTimeout的回调函数, 立即执行回调函数输出’setTimeout2’。</li></ol></div><h3 id="再思考一下下面代码的执行顺序"><a href="#再思考一下下面代码的执行顺序" class="headerlink" title="再思考一下下面代码的执行顺序"></a>再思考一下下面代码的执行顺序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout---0&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout---200&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inner-setTimeout---0&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise5&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>思考一下, 运行结果是什么？</p><p>运行结果为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise3</span><br><span class="line">promise2</span><br><span class="line"><span class="built_in">setTimeout</span>---<span class="number">0</span></span><br><span class="line"><span class="built_in">setTimeout</span>---<span class="number">200</span></span><br><span class="line">promise5</span><br><span class="line">inner-<span class="built_in">setTimeout</span>---<span class="number">0</span></span><br></pre></td></tr></table></figure><div class="tip bell"><p>来详细说明一下, JS引擎是如何执行这段代码的</p></div><div class="note blue no-icon flat"><ol><li>首先顺序执行完主进程上的同步任务，第一句和最后一句的console.log。</li><li>接着遇到setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在下一次的事件循环中执行)。</li><li>接着遇到setTimeout 200，它的作用是在 200ms 后将回调函数放到宏任务队列中(这个任务在再下一次的事件循环中执行)。</li><li>同步任务执行完之后，首先检查微任务队列, 即 microtask队列，发现此队列不为空，执行第一个promise的then回调，输出 ‘promise1’，然后执行第二个promise的then回调，输出’promise3’，由于第一个promise的.then()的返回依然是promise，所以第二个.then()会放到microtask队列继续执行，输出 ‘promise2’。</li><li>此时microtask队列为空，进入下一个事件循环, 检查宏任务队列，发现有 setTimeout的回调函数，立即执行回调函数输出 ‘setTimeout—-0’,检查microtask 队列，队列为空，进入下一次事件循环。</li><li>检查宏任务队列，发现有 setTimeout的回调函数, 立即执行回调函数输出’setTimeout—-200’。</li><li>接着遇到setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中，检查微任务队列，即 microtask 队列，发现此队列不为空，执行promise的then回调，输出’promise5’。</li><li>此时microtask队列为空，进入下一个事件循环，检查宏任务队列，发现有 setTimeout 的回调函数，立即执行回调函数输出，输出’inner-setTimeout—-0’。代码执行结束。</li></ol></div><h2 id="4-为什么会需要event-loop"><a href="#4-为什么会需要event-loop" class="headerlink" title="4. 为什么会需要event-loop?"></a>4. 为什么会需要event-loop?</h2><div class="note blue no-icon flat"><p>因为 JavaScript 是单线程的。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。为了协调事件（event），用户交互（user interaction），脚本（script），渲染（rendering），网络（networking）等，用户代理（user agent）必须使用事件循环（event loops）。</p><p>最后有一点需要注意的是：本文介绍的是浏览器的Event-loop，因此在测试验证时，一定要使用浏览器环境进行测试验证，如果使用了node环境，那么结果不一定是如上所说。</p></div><h2 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5. 参考文章"></a>5. 参考文章</h2><p><a href="https://segmentfault.com/a/1190000013233792">任务、微任务、队列以及调度</a></p><p><a href="https://segmentfault.com/a/1190000010622146">什么是浏览器的事件循环（Event Loop）？</a></p><p><a href="https://segmentfault.com/a/1190000013861128">一篇文章教会你Event loop——浏览器和Node</a></p><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈Event Loop</a></p>]]></content>
    
    
    <summary type="html">🍓彻底搞懂浏览器Event-loop</summary>
    
    
    
    <category term="Js" scheme="https://www.axcode.cn/categories/Js/"/>
    
    
    <category term="Js" scheme="https://www.axcode.cn/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>关于Mac 电脑访问不了 github 问题解决实践</title>
    <link href="https://www.axcode.cn/posts/e65223e7.html"/>
    <id>https://www.axcode.cn/posts/e65223e7.html</id>
    <published>2024-06-12T04:21:13.000Z</published>
    <updated>2025-06-09T06:17:11.421Z</updated>
    
    <content type="html"><![CDATA[<div class="tip "><p>此文来自于简书作者 <a href="https://www.jianshu.com/u/f4f1f0438249">物联白菜</a> 本站只做记录使用，如有侵权，请联系站长删除！</p></div><div class="note blue no-icon flat"><p>因为做开发，访问github网站是家常便饭的事，但是因为GitHub的IP地址是动态变化的，所以有时候可以访问有时候又不行，苦于烦恼网上找了解决方案，转自以下大佬的参考 ：</p><p><a href="https://www.jianshu.com/p/b3559ac34590">github访问不了问题解决</a> &amp;&amp; <a href="https://www.cnblogs.com/wanpi/p/14668174.html">彻底解决各种浏览器访问不了GitHub问题</a></p><p><a href="https://blog.csdn.net/weixin_38629529/article/details/120788902">Mac修改hosts文件方法链接</a></p><p>基本操作步骤如下</p></div><h2 id="1-获取github-com"><a href="#1-获取github-com" class="headerlink" title="1. 获取github.com"></a>1. 获取github.com</h2><div class="note blue no-icon flat"><p>访问 <a href="https://www.ipaddress.com/website/github.com/">https://www.ipaddress.com/website/github.com/</a> 获取一个如下图的地址</p><p><img src="https://bu.dusays.com/2024/06/12/66692948896a5.png" alt=""></p></div><h2 id="2-获取github-global-ssl-fastly-net"><a href="#2-获取github-global-ssl-fastly-net" class="headerlink" title="2. 获取github.global.ssl.fastly.net"></a>2. 获取github.global.ssl.fastly.net</h2><div class="note blue no-icon flat"><p>访问 <a href="https://www.ipaddress.com/website/github.global.ssl.fastly.net/">https://www.ipaddress.com/website/github.global.ssl.fastly.net/</a> 取得一个最新的地址如下</p><p><img src="https://bu.dusays.com/2024/06/12/666929e48155d.png" alt=""></p></div><h2 id="3-获取github-githubassets-com"><a href="#3-获取github-githubassets-com" class="headerlink" title="3. 获取github.githubassets.com"></a>3. 获取github.githubassets.com</h2><div class="note blue no-icon flat"><p>访问<a href="https://www.ipaddress.com/website/github.githubassets.com/">https://www.ipaddress.com/website/github.githubassets.com/</a> 取得一个最新的地址如下</p><p><img src="https://bu.dusays.com/2024/06/12/66692ab2e807a.png" alt=""></p></div><h2 id="4-修改hosts文件，将获得的IP-地址配置进去并刷新DNS"><a href="#4-修改hosts文件，将获得的IP-地址配置进去并刷新DNS" class="headerlink" title="4. 修改hosts文件，将获得的IP 地址配置进去并刷新DNS"></a>4. 修改hosts文件，将获得的IP 地址配置进去并刷新DNS</h2><div class="note blue no-icon flat"><p>此文只针对Mac，windows系统的同学请看 <a href="https://www.cnblogs.com/wanpi/p/14668174.html">彻底解决各种浏览器访问不了GitHub问题</a>。</p><p>Mac版hosts文件修改要通过 VI 操作才可以添加进去，不然改不了。</p><ol><li>终端输入 sudo vi /etc/hosts</li><li>输入电脑用户密码</li><li>输入i，进入插入模式</li><li>将上述地址复制粘贴进去</li><li>按Esc退出插入模式，然后输入 :wq， Enter保存退出</li><li>终端执行 sudo killall -HUP mDNSResponder 刷新dns</li></ol></div><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>过了一段时间只要感觉github有时候难访问了，重新执行一下<code>sudo killall -HUP mDNSResponder</code> 刷新dns就好了，可以把这个指令保存一下。</p><p>因为github IP地址会变化，所以我截图的IP地址会有不同，但没关系，复制你访问得到的IP地址就可以了，大功告成。</p><p>优先考虑用Chrome浏览器打开哈。</p></div><h2 id="5-https-stackoverflow-com-访问被墙解决办法"><a href="#5-https-stackoverflow-com-访问被墙解决办法" class="headerlink" title="5. https://stackoverflow.com/ 访问被墙解决办法"></a>5. <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fstackoverflow.com%2F">https://stackoverflow.com/</a> 访问被墙解决办法</h2><div class="note blue no-icon flat"><p>参考 <a href="https://www.codetd.com/article/4947217">Stack Overflow 打不开，登录不上，火狐和Chrome浏览器的完美解决方案</a></p><p><strong>Firefox</strong>插件 <a href="https://addons.mozilla.org/en-US/firefox/addon/replace-google-cdn/">插件1</a> <a href="https://addons.mozilla.org/en-US/firefox/addon/google-cdn-replace/">插件2</a></p><p><strong>Chrome</strong> <a href="https://imgurl.ninedvr.com/app/ReplaceGoogleCDN-master.zip">拓展程序插件下载</a> 解压之后将<code>extension``extension-v2</code>添加到扩展程序中。</p><p><a href="https://mirrors.ustc.edu.cn/">高校开源镜像源</a></p></div>]]></content>
    
    
    <summary type="html">🥝关于Mac 电脑访问不了 github 问题解决实践</summary>
    
    
    
    <category term="Git" scheme="https://www.axcode.cn/categories/Git/"/>
    
    
    <category term="Git" scheme="https://www.axcode.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JS十大排序算法</title>
    <link href="https://www.axcode.cn/posts/69b07b28.html"/>
    <id>https://www.axcode.cn/posts/69b07b28.html</id>
    <published>2024-06-11T07:12:18.000Z</published>
    <updated>2024-06-12T13:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序算法说明"><a href="#排序算法说明" class="headerlink" title="排序算法说明"></a>排序算法说明</h2><div class="note blue no-icon flat"><p>1.对于评述算法优劣术语的说明</p><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序后a仍然在b的前面；</li><li><strong>不稳定</strong>：如果a原本在b前面，a=b，排序后a可能会出现在b的后面；</li><li><strong>内排序</strong>：所有排序操作都在内存中完成；</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li><strong>时间复杂度</strong>：一个算法执行所耗费的时间；</li><li><strong>空间复杂度</strong>：运行完成一个程序所需内存的大小。</li></ul><p>2.排序算法图片总结</p><p><img src="https://bu.dusays.com/2024/06/11/6667fab8e45a9.webp" alt=""></p></div><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><div class="note info modern no-icon flat"><ol><li>比较相邻两个元素，如果前一个比后一个大，则交换位置。</li><li>第一轮的时候最后一个元素应该是最大的。</li><li>按照步骤一的方法继续进行相邻两个元素的比较，这个时候由于最后的一个元素已经是最大的了，所以最后一个元素不用比较。</li></ol></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">elements</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;elements.<span class="property">length</span>;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;elements.<span class="property">length</span>-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(elements[j] &gt; elements[j+<span class="number">1</span>])&#123;</span><br><span class="line">               <span class="keyword">var</span>  swap=elements[j];</span><br><span class="line">               elements[j]=elements[j+<span class="number">1</span>];</span><br><span class="line">               elements[j+<span class="number">1</span>]=swap;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elements=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before&#x27;</span>+elements);</span><br><span class="line"><span class="title function_">sort</span>(elements);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;after&#x27;</span>+elements);</span><br></pre></td></tr></table></figure><h2 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2.快速排序"></a>2.快速排序</h2><div class="note info modern no-icon flat"><p>快速排序是对冒泡排序的一种改进，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小，然后递归调用，在两边都实行快速排序。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">elements</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(elements.<span class="property">length</span> &lt;=<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> elements;  </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex=<span class="title class_">Math</span>.<span class="title function_">floor</span>(elements.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> pivot=elements.<span class="title function_">splice</span>(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> left=[];</span><br><span class="line">  <span class="keyword">var</span> right=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;elements.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(elements[i] &lt; pivot)&#123;</span><br><span class="line">        left.<span class="title function_">push</span>(elements[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       right.<span class="title function_">push</span>(elements[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="keyword">return</span>  <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([pivot],<span class="title function_">quickSort</span>(right));</span><br><span class="line"><span class="comment">//concat()方法用于连接两个或者多个数组；该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> elements=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">quickSort</span>(elements)); </span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><div class="note info modern no-icon flat"><ol><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取下一个元素，在已排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移动到下一位置；</li><li>重复步骤3，直接找打已排序的元素大小或者等于新元素的位置；</li><li>将新元素插到下一位置；</li><li>重复步骤2</li></ol></div><h3 id="3-1-正常的插入排序"><a href="#3-1-正常的插入排序" class="headerlink" title="3.1 正常的插入排序"></a>3.1 正常的插入排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sort</span>(<span class="params">elements</span>)&#123;</span><br><span class="line">    <span class="comment">// 假设第0个元素是一个有序数列，第1个以后的是无序数列，</span></span><br><span class="line">    <span class="comment">// 所以从第1个元素开始将无序数列的元素插入到有序数列中去</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>; i&lt;=elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 升序</span></span><br><span class="line">        <span class="keyword">if</span>(elements[i] &lt; elements[i-<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="comment">// 取出无序数列中的第i个作为被插入元素</span></span><br><span class="line">            <span class="keyword">var</span> guard=elements[i];</span><br><span class="line">            <span class="comment">//记住有序数列的最后一个位置，并且将有序数列的位置扩大一个</span></span><br><span class="line">            <span class="keyword">var</span> j=i-<span class="number">1</span>;</span><br><span class="line">            elements[i]=elements[j];</span><br><span class="line">            <span class="comment">// 比大小;找到被插入元素所在位置</span></span><br><span class="line">            <span class="keyword">while</span> (j&gt;=<span class="number">0</span> &amp;&amp; guard &lt;elements[j]) &#123;</span><br><span class="line">                elements[j+<span class="number">1</span>]=elements[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            elements[j+<span class="number">1</span>]=guard; <span class="comment">//插入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elements=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;没调用之前：&#x27;</span>+elements);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line"><span class="title function_">sort</span>(elements);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;被调用之后：&#x27;</span>+elements);</span><br></pre></td></tr></table></figure><h3 id="3-2-二分查找"><a href="#3-2-二分查找" class="headerlink" title="3.2 二分查找"></a>3.2 二分查找</h3><div class="note info modern no-icon flat"><p>二分查找，也为折半查找，首先要找到一个中间值，通过与中间值的比较，大的放右，小的放左。再向两边中寻找中间值，持续以上操作。直到找到左右位置为止。</p></div><h4 id="3-2-1-递归方式"><a href="#3-2-1-递归方式" class="headerlink" title="3.2.1 递归方式"></a>3.2.1 递归方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">data,dest,start,end</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> end=end || data.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> start=start || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> m=<span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(data[m]==dest)&#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dest &lt; data[m])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">binarySearch</span>(data,dest,<span class="number">0</span>,m-<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">binarySearch</span>(data,dest,m+<span class="number">1</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">binarySearch</span>(arr,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="3-2-2-非递归方式"><a href="#3-2-2-非递归方式" class="headerlink" title="3.2.2 非递归方式"></a>3.2.2 非递归方式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">data,dest</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> h=data.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;=h) &#123;</span><br><span class="line">        <span class="keyword">var</span> m=<span class="title class_">Math</span>.<span class="title function_">floor</span>((h+l)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(data[m] ==dest)&#123;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dest &gt;data[m])&#123;</span><br><span class="line">            l=m+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            h=m-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">binarySearch</span>(arr,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="4-选择排序"><a href="#4-选择排序" class="headerlink" title="4. 选择排序"></a>4. 选择排序</h2><div class="note info modern no-icon flat"><p>首先在未排序序列中找到最大（小）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最大（小）元素，放到已排序序列的末尾。以此类推，直到所有元素均排列完毕。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> len=arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> minIndex,temp;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;选择排序耗时&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        minIndex=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123; <span class="comment">//寻找最小数</span></span><br><span class="line">                minIndex=j; <span class="comment">//将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=arr[i];</span><br><span class="line">        arr[i]=arr[minIndex];</span><br><span class="line">        arr[minIndex]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;选择排序耗时&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="5-希尔排序"><a href="#5-希尔排序" class="headerlink" title="5. 希尔排序"></a>5. 希尔排序</h2><div class="note info modern no-icon flat"><p>先将这个待排序的记录序列分割成若干子序列分别进行直接插入排序</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> len=arr.<span class="property">length</span>,temp,gap=<span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;希尔排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (gap&lt;len/<span class="number">5</span>) &#123; <span class="comment">//动态定义间隔序列</span></span><br><span class="line">        gap=gap*<span class="number">5</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(gap;gap&gt;<span class="number">0</span>;gap=<span class="title class_">Math</span>.<span class="title function_">floor</span>(gap /<span class="number">5</span>))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=gap;i&lt;len;i++)&#123;</span><br><span class="line">            temp=arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i-gap; j &gt;=<span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap)&#123;</span><br><span class="line">                arr[j+gap]=arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+gap]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;希尔排序耗时：&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shellSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="6-归并排序"><a href="#6-归并排序" class="headerlink" title="6. 归并排序"></a>6. 归并排序</h2><div class="note info modern no-icon flat"><p>归并排序是一种稳定的排序方法，将以有序的子序列合并，得到完全有序的序列，即先使每个子序列有序，再使子序列段有序。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>)&#123; <span class="comment">//采用自上而下的递归方法</span></span><br><span class="line">    <span class="keyword">var</span> len=arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle=<span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>),</span><br><span class="line">          left=arr.<span class="title function_">slice</span>(<span class="number">0</span>,middle),</span><br><span class="line">          right=arr.<span class="title function_">slice</span>(middle);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left),<span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result=[];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;归并排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(left.<span class="property">length</span> &amp;&amp; right.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[<span class="number">0</span>]&lt;=right[<span class="number">0</span>])&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(left.<span class="property">length</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right.<span class="property">length</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;归并排序耗时：&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">10</span>];</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">mergeSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="7-堆排序"><a href="#7-堆排序" class="headerlink" title="7. 堆排序"></a>7. 堆排序</h2><div class="note info modern no-icon flat"><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种【】排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质，即子节点的键值或索引总是小于（或者大于）它的节点。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">array</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;堆排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(array).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>)===<span class="string">&#x27;Array&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> heapSize=array.<span class="property">length</span>,temp;<span class="comment">//建堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="title class_">Math</span>.<span class="title function_">floor</span>(heapSize / <span class="number">2</span>) -<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="title function_">heapify</span>(array,i,heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=heapSize-<span class="number">1</span>;j&gt;=<span class="number">1</span>;j--)&#123;<span class="comment">//堆排序</span></span><br><span class="line">            temp=array[<span class="number">0</span>];</span><br><span class="line">            array[<span class="number">0</span>]=array[j];</span><br><span class="line">            array[j]=temp;</span><br><span class="line">            <span class="title function_">heapify</span>(array,<span class="number">0</span>,--heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;堆排序耗时：&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;array is not an Array!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr,x,len</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>)===<span class="string">&#x27;Array&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> x===<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> l = <span class="number">2</span> * x + <span class="number">1</span>,</span><br><span class="line">            r = <span class="number">2</span> * x + <span class="number">2</span>,</span><br><span class="line">            largest = x,</span><br><span class="line">            temp;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; len &amp;&amp; arr[l] &gt; arr[largest])&#123;</span><br><span class="line">            largest = l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(r &lt; len &amp;&amp; arr[r] &gt; arr[largest])&#123;</span><br><span class="line">            largest = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(largest != x)&#123;</span><br><span class="line">            temp = arr[x];</span><br><span class="line">            arr[x] = arr[largest];</span><br><span class="line">            arr[largest] = temp;</span><br><span class="line">            <span class="title function_">heapify</span>(arr,largest,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;arr is not Array or x is not a number!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">91</span>,<span class="number">60</span>,<span class="number">96</span>,<span class="number">86</span>,<span class="number">13</span>,<span class="number">73</span>,<span class="number">63</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">71</span>,<span class="number">88</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">heapSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="8-计数排序"><a href="#8-计数排序" class="headerlink" title="8. 计数排序"></a>8. 计数排序</h2><div class="note info modern no-icon flat"><p>计数排序使用一种额外的数组C,其中第一个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将数组A中的元素排序到正确的位置。它只能对整数进行排序。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">array</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> len = array.<span class="property">length</span>, B = [],C = [],</span><br><span class="line">         min = max =array[<span class="number">0</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;计数排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        min = min &lt;= array[i] ? min : array[i];</span><br><span class="line">        max = max &gt;= array[i] ? max : array[i];</span><br><span class="line">        C[array[i]] = C[array[i]] ? C[array[i]] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = min; j &lt; max; j++) &#123;</span><br><span class="line">        C[j+<span class="number">1</span>] = (C[j + <span class="number">1</span>] || <span class="number">0</span>) + (C[j] || <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = len - <span class="number">1</span>; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">        B[C[array[k]] - <span class="number">1</span>] =array[k];</span><br><span class="line">        C[array[k]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;计数排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">69</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">countingSort</span>(arr));</span><br></pre></td></tr></table></figure><h2 id="9-桶排序"><a href="#9-桶排序" class="headerlink" title="9. 桶排序"></a>9. 桶排序</h2><div class="note info modern no-icon flat"><p>假设输入数据服从均匀分布,将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是yidigui以递归的方式继续使用桶排序进行排）。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bucketSort</span>(<span class="params">array,num</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(array.<span class="property">length</span> &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = array.<span class="property">length</span>,buckets = [],result = [],</span><br><span class="line">    min = max =array[<span class="number">0</span>],regex =<span class="string">&#x27;/^[1-9]+[0-9]*$/&#x27;</span>,space,n=<span class="number">0</span>;</span><br><span class="line">    num = num || ((num &gt; <span class="number">1</span> &amp;&amp; regex.<span class="title function_">test</span>(num))?num : <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">        min = min &lt;= array[i] ? min :array[i];</span><br><span class="line">        max = max &gt;=array[i] ? max : array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    space = (max - min + <span class="number">1</span>) / num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j =<span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>((array[j] - min) / space);</span><br><span class="line">        <span class="keyword">if</span>(buckets[index])&#123;<span class="comment">//非空桶，插入排序</span></span><br><span class="line">            <span class="keyword">var</span> k = buckets[index].<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; buckets[index][k] &gt; array[j]) &#123;</span><br><span class="line">                buckets[index][k+<span class="number">1</span>] = buckets[index][k];</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            buckets[index][k+<span class="number">1</span>]=array[j];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//空桶，初始化</span></span><br><span class="line">            buckets[index] = [];</span><br><span class="line">            buckets[index].<span class="title function_">push</span>(array[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; num) &#123;</span><br><span class="line">        result = result.<span class="title function_">concat</span>(buckets[n]);</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">3</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">87</span>,<span class="number">98</span>,<span class="number">68</span>,<span class="number">58</span>,<span class="number">70</span>,<span class="number">66</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">bucketSort</span>(arr,<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="10-基数排序"><a href="#10-基数排序" class="headerlink" title="10. 基数排序"></a>10. 基数排序</h2><div class="note info modern no-icon flat"><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集，以此类推，直到最高位，有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的排在前面，基数排序基于分别排序，分别收集，所以是稳定的。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">arr,maxDight</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> dev =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> counter = [];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;基数排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDight; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> bucket= <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span>(counter[bucket] == <span class="literal">null</span>)&#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].<span class="title function_">push</span>(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j&lt; counter.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(counter[j] != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].<span class="title function_">shift</span>())!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;基数排序耗时：&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">3</span>,<span class="number">55</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">87</span>,<span class="number">98</span>,<span class="number">68</span>,<span class="number">58</span>,<span class="number">70</span>,<span class="number">66</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title function_">radixSort</span>(arr,<span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍭JS十大排序算法</summary>
    
    
    
    <category term="Js" scheme="https://www.axcode.cn/categories/Js/"/>
    
    
    <category term="Js" scheme="https://www.axcode.cn/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>vue项目使用Base64加密解密</title>
    <link href="https://www.axcode.cn/posts/57e6be25.html"/>
    <id>https://www.axcode.cn/posts/57e6be25.html</id>
    <published>2024-06-10T14:36:00.000Z</published>
    <updated>2024-06-12T13:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note info flat"><p>本文来自简书<a href='https://www.jianshu.com/u/5cc9c8608284'>5cc9c8608284</a>，本站只做记录，已标明出处，如有侵权，请联系站长删除！</p></div><h2 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h2><h3 id="1-window-btoa-方法"><a href="#1-window-btoa-方法" class="headerlink" title="1.window btoa() 方法"></a>1.<code>window btoa()</code> 方法</h3><div class="note success no-icon flat"><p><code>btoa()</code>方法用于创建一个 base-64 编码的字符串，接收一个字符串作为参数。<br> 该方法使用 “A-Z”, “a-z”, “0-9”, “+”, “/“ 和 “=” 字符来编码字符串。<br> 例如:</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;i love coding&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> enc = <span class="variable language_">window</span>.<span class="title function_">btoa</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(enc);<span class="comment">//打印结果为 &#x27;aSBsb3ZlIGNvZGluZw==&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-window-atob-方法"><a href="#2-window-atob-方法" class="headerlink" title="2.window atob() 方法"></a>2.<code>window atob()</code> 方法</h3><div class="note success no-icon flat"><p>对应的，atob() 方法用于解码使用 base-64 编码的字符串。<br>atob() 方法接收一个通过 btoa() 方法编码的字符串.<br>例如:</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> encStr=<span class="string">&#x27;aSBsb3ZlIGNvZGluZw==&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> decStr=<span class="variable language_">window</span>.<span class="title function_">atob</span>(encStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decStr);<span class="comment">//打印结果为 i love coding</span></span><br></pre></td></tr></table></figure><h2 id="二、使用js-base64进行加密解密"><a href="#二、使用js-base64进行加密解密" class="headerlink" title="二、使用js-base64进行加密解密"></a>二、使用js-base64进行加密解密</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save js-base64</span><br></pre></td></tr></table></figure><h3 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h3><p>一般是在处理登录请求的页面引入<code>js-base64</code>,不过如果你的页面中有很多地方都有用到加密解密，你也可以在<code>main.js</code>中引入依赖<br>（1）在单个页面引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Base64</span> = <span class="built_in">require</span>(<span class="string">&#x27;js-base64&#x27;</span>).<span class="property">Base64</span></span><br><span class="line"><span class="comment">//或者import &#123;Base64&#125; from &#x27;js-base64&#x27;</span></span><br><span class="line"><span class="title class_">Base64</span>.<span class="title function_">encode</span>(password);<span class="comment">//加密</span></span><br><span class="line"><span class="title class_">Base64</span>.<span class="title function_">decode</span>(password);<span class="comment">//解密</span></span><br></pre></td></tr></table></figure><p>(2)在<code>main.js</code>中引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line">import &#123;Base64&#125; from &#x27;js-base64&#x27;</span><br><span class="line">Vue.prototype.$Base64 = Base64;</span><br></pre></td></tr></table></figure><p>然后在单页面组件中使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">let</span> encPass=<span class="variable language_">this</span>.<span class="property">$Base64</span>.<span class="title function_">encode</span>(password);<span class="comment">//加密</span></span><br><span class="line"><span class="keyword">let</span> decPass=<span class="variable language_">this</span>.<span class="property">$Base64</span>.<span class="title function_">decode</span>(encPass);<span class="comment">//解密</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍇vue项目使用Base64加密解密</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS根据身份证号码计算年龄和性别</title>
    <link href="https://www.axcode.cn/posts/4e9b3be9.html"/>
    <id>https://www.axcode.cn/posts/4e9b3be9.html</id>
    <published>2024-06-10T11:11:20.000Z</published>
    <updated>2024-06-12T08:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">analyzeIDCard</span>(<span class="params">IDCord</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> sexAndAge = &#123;&#125;;</span><br><span class="line">   <span class="comment">//获取用户身份证号码</span></span><br><span class="line">   <span class="keyword">var</span> userCard = <span class="title class_">IDCord</span>;</span><br><span class="line">   <span class="comment">//如果用户身份证号码为undefined则返回空</span></span><br><span class="line">   <span class="keyword">if</span>(!userCard)&#123;</span><br><span class="line">     <span class="keyword">return</span> sexAndAge;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取性别</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">parseInt</span>(userCard.<span class="title function_">substr</span>(<span class="number">16</span>,<span class="number">1</span>)) % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">     sexAndAge.<span class="property">sex</span> = <span class="string">&#x27;1 男&#x27;</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     sexAndAge.<span class="property">sex</span> = <span class="string">&#x27;0 女&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取出生日期</span></span><br><span class="line">   <span class="comment">// userCard.substring(6,10) + &quot;-&quot; + userCard.substring(10,12) + &quot;-&quot; + userCard.substring(12,14)</span></span><br><span class="line">   <span class="keyword">var</span> yearBirth = userCard.<span class="title function_">substring</span>(<span class="number">6</span>,<span class="number">10</span>)】</span><br><span class="line">   <span class="keyword">var</span> monthBirth = userCard.<span class="title function_">substring</span>(<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line">   <span class="keyword">var</span> dayBirth = userCard.<span class="title function_">substring</span>(<span class="number">12</span>,<span class="number">14</span>);</span><br><span class="line">   <span class="comment">// 获取当前年月日并计算年龄</span></span><br><span class="line">   <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="keyword">var</span> monthNow = myDate.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">var</span> dayNow = myDate.<span class="title function_">getDate</span>();</span><br><span class="line">   <span class="keyword">var</span> age = myDate.<span class="title function_">getFullYear</span>() - yearBirth;</span><br><span class="line">   <span class="keyword">if</span>(monthNow &lt; monthBirth || (monthNow == monthBirth &amp;&amp; dayNow &lt; dayBirth))&#123;</span><br><span class="line">     age --;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 得到年龄</span></span><br><span class="line">   sexAndAge.<span class="property">age</span> = age;</span><br><span class="line">   <span class="comment">// 返回 性别和年龄</span></span><br><span class="line">   <span class="keyword">return</span> sexAndAge;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**测试 */</span></span><br><span class="line"> <span class="keyword">var</span> <span class="variable constant_">ID</span> = <span class="title function_">analyzeIDCard</span>(<span class="string">&#x27;510612199004174732&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">ID</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍂JS根据身份证号码计算年龄和性别</summary>
    
    
    
    <category term="Js" scheme="https://www.axcode.cn/categories/Js/"/>
    
    
    <category term="Js" scheme="https://www.axcode.cn/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>JOSN.parse(JSON.stringify(obj))实现深拷贝的弊端</title>
    <link href="https://www.axcode.cn/posts/fc808795.html"/>
    <id>https://www.axcode.cn/posts/fc808795.html</id>
    <published>2024-06-10T06:31:31.000Z</published>
    <updated>2024-08-08T10:43:29.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-如果obj里面有时间对象，则JSON-stringify后再JSON-parse的结果，时间将只是字符串的形式；而不是时间对象。"><a href="#1-如果obj里面有时间对象，则JSON-stringify后再JSON-parse的结果，时间将只是字符串的形式；而不是时间对象。" class="headerlink" title="1. 如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式；而不是时间对象。"></a>1. 如果obj里面有时间对象，则<code>JSON.stringify</code>后再<code>JSON.parse</code>的结果，时间将只是字符串的形式；而不是时间对象。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">   <span class="attr">date</span>:[<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">153662760000</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">15400476000000</span>)],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b;</span><br><span class="line">b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(test));</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/10/66669f8fef426.webp" alt="test和b的结果"></p><p><img src="https://bu.dusays.com/2024/06/10/66669f8fde60c.webp" alt="测试b和test类型"></p><h3 id="2-如果obj里有RegExp-、Error对象，则序列化的结果只得到空对象。"><a href="#2-如果obj里有RegExp-、Error对象，则序列化的结果只得到空对象。" class="headerlink" title="2. 如果obj里有RegExp 、Error对象，则序列化的结果只得到空对象。"></a>2. 如果obj里有RegExp 、Error对象，则序列化的结果只得到空对象。</h3><p><img src="https://bu.dusays.com/2024/06/10/66669f8fdd041.webp" alt=""></p><h3 id="3-如果obj里有函数，-undefined-，则序列化的结果会把函数或undefined丢失。"><a href="#3-如果obj里有函数，-undefined-，则序列化的结果会把函数或undefined丢失。" class="headerlink" title="3. 如果obj里有函数， undefined ，则序列化的结果会把函数或undefined丢失。"></a>3. 如果obj里有函数， undefined ，则序列化的结果会把函数或undefined丢失。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">   <span class="attr">date</span>:<span class="keyword">function</span> <span class="title function_">hehe</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;肖战&#x27;</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> copyed = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(test));</span><br><span class="line">test.<span class="property">name</span> = <span class="string">&#x27;魏无羡&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;debugger&#x27;</span>,test,copyed);</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/10/66669f8fb0fa7.webp" alt="函数"></p><p><img src="https://bu.dusays.com/2024/06/10/66669f8f9d08c.webp" alt="undefined"></p><h3 id="4-如果obj里有NaN、infinity和-Infinity，则序列化的结果会变为null"><a href="#4-如果obj里有NaN、infinity和-Infinity，则序列化的结果会变为null" class="headerlink" title="4. 如果obj里有NaN、infinity和-Infinity，则序列化的结果会变为null"></a>4. 如果obj里有NaN、infinity和-Infinity，则序列化的结果会变为null</h3><p><img src="https://bu.dusays.com/2024/06/10/66669f8f91736.webp" alt=""></p><h3 id="5-JSON-stringify-只能序列化对象的可枚举的自有属性，例如：如果obj中的对象是由构造函数生成的，则使用JSON-parse-JSON-stringify-obj-深拷贝后，会丢弃对象constructor"><a href="#5-JSON-stringify-只能序列化对象的可枚举的自有属性，例如：如果obj中的对象是由构造函数生成的，则使用JSON-parse-JSON-stringify-obj-深拷贝后，会丢弃对象constructor" class="headerlink" title="5. JSON.stringify()只能序列化对象的可枚举的自有属性，例如：如果obj中的对象是由构造函数生成的，则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象constructor;"></a>5. <code>JSON.stringify()</code>只能序列化对象的可枚举的自有属性，例如：如果obj中的对象是由构造函数生成的，则使用<code>JSON.parse(JSON.stringify(obj))</code>深拷贝后，会丢弃对象<code>constructor</code>;</h3><p><img src="https://bu.dusays.com/2024/06/10/66669f8fa5d57.webp" alt=""></p><h3 id="6-如果对象中存在循环引用的情况也是无法正确实现深拷贝。"><a href="#6-如果对象中存在循环引用的情况也是无法正确实现深拷贝。" class="headerlink" title="6. 如果对象中存在循环引用的情况也是无法正确实现深拷贝。"></a>6. 如果对象中存在循环引用的情况也是无法正确实现深拷贝。</h3><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>如果拷贝的对象不涉及上面的情况，可以使用<code>JSON.parse(JSON.stringify(obj))</code>实现深拷贝，但是涉及上面的情况，可以考虑使用下面的方式实现。</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现深拷贝函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="variable language_">this</span>.<span class="title function_">judgeType</span>(data);</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">&#x27;array&#x27;</span>)&#123;</span><br><span class="line">        obj = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            obj.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="title function_">deepClone</span>(data[i]));                          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>( type === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">        obj =&#123;&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">                obj[key] = <span class="variable language_">this</span>.<span class="title function_">deepClone</span>(data[key])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">judgeType</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line">    <span class="keyword">const</span> map =&#123;</span><br><span class="line">        <span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;boolean&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;number&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Function]&#x27;</span>: <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Date]&#x27;</span>: <span class="string">&#x27;date&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object RegExp]&#x27;</span>: <span class="string">&#x27;regExp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Undefined]&#x27;</span>: <span class="string">&#x27;undefined&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Null]&#x27;</span>: <span class="string">&#x27;null&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Element</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;element&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map[toString.<span class="title function_">call</span>(obj)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test =&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="attr">date</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">deepClone</span>(test));</span><br><span class="line">test.<span class="property">date</span>[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">🍉JOSN.parse(JSON.stringify(obj))实现深拷贝的弊端</summary>
    
    
    
    <category term="Js" scheme="https://www.axcode.cn/categories/Js/"/>
    
    
    <category term="Js" scheme="https://www.axcode.cn/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>Vue中使用Fullcalendar日历开发日程安排</title>
    <link href="https://www.axcode.cn/posts/c16a7e1e.html"/>
    <id>https://www.axcode.cn/posts/c16a7e1e.html</id>
    <published>2024-06-10T06:01:06.000Z</published>
    <updated>2024-06-12T13:16:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><details class="folding-tag" blue><summary> 效果预览 </summary>              <div class='content'>              <p><img src="https://bu.dusays.com/2024/06/10/6666993da4c5f.png" alt=""></p><p>官网地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Ffullcalendar.io%2Fdocs%2Fvue">Vue Component - Docs | FullCalendar</a></p>              </div>            </details><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li><p>安装如下依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;@fullcalendar/core&quot;</span></span><br><span class="line"><span class="string">&quot;@fullcalendar/daygrid&quot;</span></span><br><span class="line"><span class="string">&quot;@fullcalendar/interactib&quot;</span></span><br><span class="line"><span class="string">&quot;@fullcalendar/list&quot;</span></span><br><span class="line"><span class="string">&quot;@fullcalendar/timegrid&quot;</span></span><br><span class="line"><span class="string">&quot;@fullcalendar/vue&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要使用的页面引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FullCalendar ref=&quot;fullCalendar&quot; :options=&quot;calendarOptions&quot;&gt;&lt;/FullCalendar&gt;</span><br></pre></td></tr></table></figure></li><li><p>在页面中引入需要的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FullCalendar</span> <span class="keyword">from</span> <span class="string">&#x27;@fullcalendar/vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> dayGridPlugin <span class="keyword">from</span> <span class="string">&#x27;@fullcalendar/daygrid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> timeGridPlugin <span class="keyword">from</span> <span class="string">&#x27;@fullcalendar/timegrid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> interactionPlugin <span class="keyword">from</span> <span class="string">&#x27;@fullcalendar/interaction&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在<code>data</code>中设置日历的一些配置和及属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">  return&#123;</span><br><span class="line">     calendarOptions:&#123;</span><br><span class="line">        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],</span><br><span class="line">        initialView: &#x27;dayGridMonth&#x27;,</span><br><span class="line">        locale: &#x27;zh&#x27;,</span><br><span class="line">        firstDay: 1,</span><br><span class="line">        buttonText: &#123;</span><br><span class="line">          today: &quot;今天&quot;,</span><br><span class="line">          month: &quot;月&quot;,</span><br><span class="line">          week: &quot;周&quot;,</span><br><span class="line">          day: &quot;日&quot;,</span><br><span class="line">          // list: &quot;列表&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        headerToolbar: &#123;</span><br><span class="line">          left: &#x27;prev,next today&#x27;,</span><br><span class="line">          center: &#x27;title&#x27;,</span><br><span class="line">          right: &#x27;dayGridMonth,timeGridWeek,timeGridDay&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        weekNumberCalculation: &#x27;ISO&#x27;,</span><br><span class="line">        nowIndicator: true,</span><br><span class="line">        height:500,</span><br><span class="line">        validRange: this.validRange,  //设置可显示的总日期范围</span><br><span class="line">        eventTimeFormat: &#123; // 在每个事件上显示的时间的格式</span><br><span class="line">          hour: &#x27;numeric&#x27;, // numeric:2022,2-digit:22</span><br><span class="line">          minute: &#x27;2-digit&#x27;,</span><br><span class="line">          meridiem: false,</span><br><span class="line">          hour12: false // 设置时间为24小时</span><br><span class="line">        &#125;,</span><br><span class="line">        customButtons: &#123;</span><br><span class="line">          next: &#123;</span><br><span class="line">            click: this.nextClick</span><br><span class="line">          &#125;,</span><br><span class="line">          prev: &#123;</span><br><span class="line">            click: this.prevClick</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        editable: false, //允许拖动缩放，不写默认就是false</span><br><span class="line">        overlap: false, //允许时间重叠，即可以与其他事件并存，不写默认就是false</span><br><span class="line">        events: [], //背景色 (添加相同时间的背景色时颜色会重叠)</span><br><span class="line">        datesSet: this.datesSet, //日期渲染；修改日期范围后触发</span><br><span class="line">        eventClick: this.handleEventClick, //点击日程触发</span><br><span class="line">        dateClick: this.handleDateClick, //点击日期触发</span><br><span class="line">        eventDrop: this.calendarEventDropOrResize, //拖动事件触发</span><br><span class="line">        eventResize: this.calendarEventDropOrResize, //缩放事件触发</span><br><span class="line">        displayEventTime: false, //不显示具体时间</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">🍈Vue中使用Fullcalendar日历开发日程安排</summary>
    
    
    
    <category term="Vue" scheme="https://www.axcode.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://www.axcode.cn/tags/Vue/"/>
    
  </entry>
  
</feed>
